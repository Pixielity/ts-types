{"version":3,"sources":["../../../src/interfaces/queue/queueable.interface.ts"],"names":["IQueueable"],"mappings":";;;;;;;;;;;AA+EiB,IAAA;AAAA,CAAV,CAAUA,WAAV,KAAA;AACE,EAAMA,WAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAAA,CADzB,EAAA,UAAA,KAAA,UAAA,GAAA,EAAA,CAAA,CAAA","file":"queueable.interface.mjs","sourcesContent":["import type { IShouldQueue } from './should-queue.interface'\n\n/**\n * Interface for queueable jobs.\n * Queueable items can be processed asynchronously through a queue.\n */\nexport interface IQueueable extends IShouldQueue {\n  /**\n   * Handle the job.\n   *\n   * @param data - The job data\n   * @returns Promise resolving when the job is complete\n   */\n  handle(data: any): Promise<void>\n\n  /**\n   * Get the middleware the job should pass through.\n   *\n   * @returns Array of middleware names\n   */\n  middleware?(): string[]\n\n  /**\n   * Determine if the job should be encrypted.\n   *\n   * @returns True if the job should be encrypted\n   */\n  shouldBeEncrypted?(): boolean\n\n  /**\n   * The number of times the job may be attempted.\n   *\n   * @returns The maximum number of attempts\n   */\n  tries?(): number\n\n  /**\n   * The number of seconds the job can run before timing out.\n   *\n   * @returns The timeout in seconds\n   */\n  timeout?(): number\n\n  /**\n   * Calculate the number of seconds to wait before retrying the job.\n   *\n   * @param attempt - The current attempt number\n   * @returns The number of seconds to wait\n   */\n  retryAfter?(attempt: number): number\n\n  /**\n   * Determine if the job should be released back onto the queue.\n   *\n   * @param error - The error that caused the job to fail\n   * @returns True if the job should be released\n   */\n  shouldRelease?(error: Error): boolean\n\n  /**\n   * Handle a job failure.\n   *\n   * @param error - The error that caused the job to fail\n   * @returns Promise resolving when the failure is handled\n   */\n  failed?(error: Error): Promise<void>\n\n  /**\n   * Report progress of the job.\n   *\n   * @param progress - The progress percentage (0-100)\n   * @param data - Additional progress data\n   */\n  reportProgress?(progress: number, data?: any): Promise<void>\n}\n\n/**\n * DI token for IQueueable interface\n */\nexport namespace IQueueable {\n  export const $ = Symbol.for('IQueueable')\n}\n"]}