{"version":3,"sources":["../../../src/interfaces/queue/worker.interface.ts"],"names":["IWorker"],"mappings":";;;;;;;;;;;AAyFiB,IAAA;AAAA,CAAV,CAAUA,QAAV,KAAA;AACE,EAAMA,QAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA,CADtB,EAAA,OAAA,KAAA,OAAA,GAAA,EAAA,CAAA,CAAA","file":"worker.interface.mjs","sourcesContent":["/**\n * Interface for queue workers.\n * Workers are responsible for processing jobs from a queue.\n */\nexport interface IWorker {\n  /**\n   * Start the worker.\n   *\n   * @returns {Promise<void>}\n   */\n  start(): Promise<void>\n\n  /**\n   * Stop the worker.\n   *\n   * @returns {Promise<void>}\n   */\n  stop(): Promise<void>\n\n  /**\n   * Process the next job on the queue.\n   *\n   * @param {string} [queue] - The queue to process\n   * @returns {Promise<boolean>} True if a job was processed\n   */\n  processNext(queue?: string): Promise<boolean>\n\n  /**\n   * Get the current status of the worker.\n   *\n   * @returns {string} The worker status\n   */\n  getStatus(): string\n\n  /**\n   * Set the maximum number of attempts for failed jobs.\n   *\n   * @param {number} maxAttempts - The maximum number of attempts\n   */\n  setMaxAttempts(maxAttempts: number): void\n\n  /**\n   * Set the timeout for jobs.\n   *\n   * @param {number} timeout - The timeout in seconds\n   */\n  setTimeout(timeout: number): void\n\n  /**\n   * Set the sleep time between polling the queue.\n   *\n   * @param {number} sleep - The sleep time in seconds\n   */\n  setSleep(sleep: number): void\n\n  /**\n   * Get the worker ID.\n   *\n   * @returns {string} The worker ID\n   */\n  getId(): string\n\n  /**\n   * Get the number of jobs processed by this worker.\n   *\n   * @returns {number} The number of jobs processed\n   */\n  getProcessedCount(): number\n\n  /**\n   * Get the number of failed jobs.\n   *\n   * @returns {number} The number of failed jobs\n   */\n  getFailedCount(): number\n\n  /**\n   * Register an event handler for worker events.\n   *\n   * @param {string} event - The event name\n   * @param {Function} handler - The event handler\n   * @returns {() => void} A function to remove the event handler\n   */\n  on(event: string, handler: Function): () => void\n}\n\n/**\n * DI token for IWorker interface\n */\nexport namespace IWorker {\n  export const $ = Symbol.for(\"IWorker\")\n}\n"]}