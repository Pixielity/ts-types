{"version":3,"sources":["../../../src/interfaces/queue/queue-manager.interface.ts"],"names":["IQueueManager"],"mappings":";;;;;;;;;;;AAgIiB,IAAA;AAAA,CAAV,CAAUA,cAAV,KAAA;AACE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAD5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA","file":"queue-manager.interface.mjs","sourcesContent":["import type { IQueueConnection } from './queue-connection.interface'\nimport type { IQueueable } from './queueable.interface'\n\n/**\n * Interface for the queue manager.\n * The queue manager is responsible for managing queue connections and dispatching jobs.\n */\nexport interface IQueueManager {\n  /**\n   * Add a queue connection.\n   *\n   * @param {string} name - The connection name\n   * @param {IQueueConnection} connection - The queue connection\n   */\n  addConnection(name: string, connection: IQueueConnection): void\n\n  /**\n   * Get a queue connection by name.\n   *\n   * @param {string} [name] - The connection name (or default if not provided)\n   * @returns {IQueueConnection} The queue connection\n   */\n  connection(name?: string): IQueueConnection\n\n  /**\n   * Set the default connection name.\n   *\n   * @param {string} name - The default connection name\n   */\n  setDefaultConnection(name: string): void\n\n  /**\n   * Push a new job onto the queue.\n   *\n   * @param {IQueueable} job - The job to queue\n   * @param {any} data - Additional data for the job\n   * @param {string} [connectionName] - The connection name\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<void>}\n   */\n  push(\n    job: IQueueable,\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Push a new job onto the queue after a delay.\n   *\n   * @param {number} delay - The delay in seconds\n   * @param {IQueueable} job - The job to queue\n   * @param {any} data - Additional data for the job\n   * @param {string} [connectionName] - The connection name\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<void>}\n   */\n  later(\n    delay: number,\n    job: IQueueable,\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Push an array of jobs onto the queue.\n   *\n   * @param {IQueueable[]} jobs - The jobs to queue\n   * @param {any} data - Additional data for the jobs\n   * @param {string} [connectionName] - The connection name\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<void>}\n   */\n  bulk(\n    jobs: IQueueable[],\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Release a job back onto the queue.\n   *\n   * @param {IQueueable} job - The job to release\n   * @param {any} data - The job data\n   * @param {number} [delay=0] - The delay in seconds\n   * @param {string} [connectionName] - The connection name\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<void>}\n   */\n  release(\n    job: IQueueable,\n    data: any,\n    delay?: number,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Move a job to the failed queue.\n   *\n   * @param {IQueueable} job - The failed job\n   * @param {any} data - The job data\n   * @param {Error} error - The error that caused the failure\n   * @param {string} [connectionName] - The connection name\n   * @returns {Promise<void>}\n   */\n  failed(job: IQueueable, data: any, error: Error, connectionName?: string | null): Promise<void>\n\n  /**\n   * Get the default connection name.\n   *\n   * @returns {string} The default connection name\n   */\n  getDefaultConnection(): string\n\n  /**\n   * Get all registered connections.\n   *\n   * @returns {Record<string, IQueueConnection>} The registered connections\n   */\n  getConnections(): Record<string, IQueueConnection>\n}\n\n/**\n * DI token for IQueueManager interface\n */\nexport namespace IQueueManager {\n  export const $ = Symbol.for('IQueueManager')\n}\n"]}