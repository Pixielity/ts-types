{"version":3,"sources":["../../../src/interfaces/queue/rate-limit.interface.ts"],"names":["IRateLimiter"],"mappings":";;;;;;;;;;;AA4DiB,IAAA;AAAA,CAAV,CAAUA,aAAV,KAAA;AACE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAD3B,EAAA,YAAA,KAAA,YAAA,GAAA,EAAA,CAAA,CAAA","file":"rate-limit.interface.mjs","sourcesContent":["/**\n * Interface for rate limiter.\n */\nexport interface IRateLimiter {\n  /**\n   * Check if a key is rate limited.\n   *\n   * @param key - The key to check\n   * @param maxAttempts - The maximum number of attempts\n   * @param decaySeconds - The decay time in seconds\n   * @returns True if the key is rate limited\n   */\n  tooManyAttempts(key: string, maxAttempts: number, decaySeconds: number): Promise<boolean>\n\n  /**\n   * Increment the attempts for a key.\n   *\n   * @param key - The key to increment\n   * @param decaySeconds - The decay time in seconds\n   * @returns The current number of attempts\n   */\n  increment(key: string, decaySeconds: number): Promise<number>\n\n  /**\n   * Reset the attempts for a key.\n   *\n   * @param key - The key to reset\n   * @returns Promise resolving when the key is reset\n   */\n  reset(key: string): Promise<void>\n\n  /**\n   * Get the number of attempts for a key.\n   *\n   * @param key - The key to check\n   * @returns The number of attempts\n   */\n  attempts(key: string): Promise<number>\n\n  /**\n   * Get the number of remaining attempts for a key.\n   *\n   * @param key - The key to check\n   * @param maxAttempts - The maximum number of attempts\n   * @returns The number of remaining attempts\n   */\n  remaining(key: string, maxAttempts: number): Promise<number>\n\n  /**\n   * Get the time until the rate limit is reset.\n   *\n   * @param key - The key to check\n   * @returns The time in seconds until the rate limit is reset\n   */\n  availableIn(key: string): Promise<number>\n}\n\n/**\n * DI token for IRateLimiter interface\n */\nexport namespace IRateLimiter {\n  export const $ = Symbol.for('IRateLimiter')\n}\n"]}