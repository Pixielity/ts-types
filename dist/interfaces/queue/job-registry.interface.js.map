{"version":3,"sources":["../../../src/interfaces/queue/job-registry.interface.ts"],"names":["IJobRegistry"],"mappings":";;;;;;;;;;;;;AA0EiBA;AAAA,CAAV,CAAUA,aAAV,KAAA;AACE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAD3B,EAAAA,oBAAA,KAAAA,oBAAA,GAAA,EAAA,CAAA,CAAA","file":"job-registry.interface.js","sourcesContent":["import type { IQueueable } from \"./queueable.interface\"\n\n/**\n * Interface for job registry\n * The job registry is responsible for registering and resolving job classes\n */\nexport interface IJobRegistry {\n  /**\n   * Register a job class\n   *\n   * @param name - The name of the job class\n   * @param jobClass - The job class constructor\n   */\n  register(name: string, jobClass: new (...args: any[]) => IQueueable): void\n\n  /**\n   * Register multiple job classes\n   *\n   * @param jobClasses - Map of job class names to constructors\n   */\n  registerMany(jobClasses: Map<string, new (...args: any[]) => IQueueable>): void\n\n  /**\n   * Check if a job class is registered\n   *\n   * @param name - The name of the job class\n   * @returns True if the job class is registered\n   */\n  has(name: string): boolean\n\n  /**\n   * Get a job class by name\n   *\n   * @param name - The name of the job class\n   * @returns The job class constructor\n   * @throws Error if the job class is not registered\n   */\n  get(name: string): new (...args: any[]) => IQueueable\n\n  /**\n   * Create a new instance of a job class\n   *\n   * @param name - The name of the job class\n   * @param args - Arguments to pass to the constructor\n   * @returns A new instance of the job class\n   * @throws Error if the job class is not registered\n   */\n  make(name: string, ...args: any[]): IQueueable\n\n  /**\n   * Get all registered job classes\n   *\n   * @returns Map of job class names to constructors\n   */\n  all(): Map<string, new (...args: any[]) => IQueueable>\n\n  /**\n   * Register a job class using its class name\n   *\n   * @param jobClass - The job class constructor\n   */\n  registerClass(jobClass: new (...args: any[]) => IQueueable): void\n\n  /**\n   * Remove a job class from the registry\n   *\n   * @param name - The name of the job class\n   */\n  unregister(name: string): void\n}\n\n/**\n * DI token for IJobRegistry interface\n */\nexport namespace IJobRegistry {\n  export const $ = Symbol.for(\"IJobRegistry\")\n}\n"]}