{"version":3,"sources":["../../../src/interfaces/queue/worker.interface.ts"],"names":["IWorker"],"mappings":";;;;;;;;;;;;;AA6EiBA;AAAA,CAAV,CAAUA,QAAV,KAAA;AACE,EAAMA,QAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA,CADtB,EAAAA,eAAA,KAAAA,eAAA,GAAA,EAAA,CAAA,CAAA","file":"worker.interface.js","sourcesContent":["import { WorkerStatus } from '../../enums'\n\n/**\n * Interface for queue workers.\n * Workers are responsible for processing jobs from a queue.\n */\nexport interface IWorker {\n  /**\n   * Start the worker.\n   *\n   * @returns Promise resolving when the worker is started\n   */\n  start(): Promise<void>\n\n  /**\n   * Stop the worker.\n   *\n   * @returns Promise resolving when the worker is stopped\n   */\n  stop(): Promise<void>\n\n  /**\n   * Process the next job on the queue.\n   *\n   * @param queue - The queue to process\n   * @returns Promise resolving to true if a job was processed\n   */\n  processNext(queue?: string): Promise<boolean>\n\n  /**\n   * Get the current status of the worker.\n   *\n   * @returns The worker status\n   */\n  getStatus(): WorkerStatus\n\n  /**\n   * Set the maximum number of attempts for failed jobs.\n   *\n   * @param maxAttempts - The maximum number of attempts\n   */\n  setMaxAttempts(maxAttempts: number): void\n\n  /**\n   * Set the timeout for jobs.\n   *\n   * @param timeout - The timeout in seconds\n   */\n  setTimeout(timeout: number): void\n\n  /**\n   * Set the sleep time between polling the queue.\n   *\n   * @param sleep - The sleep time in seconds\n   */\n  setSleep(sleep: number): void\n\n  /**\n   * Set the concurrency level.\n   *\n   * @param concurrency - The number of jobs to process concurrently\n   */\n  setConcurrency(concurrency: number): void\n\n  /**\n   * Listen for worker events.\n   *\n   * @param event - The event name\n   * @param callback - The callback function\n   * @returns A function to remove the listener\n   */\n  on(event: string, callback: (data: any) => void): () => void\n}\n\n/**\n * DI token for IWorker interface\n */\nexport namespace IWorker {\n  export const $ = Symbol.for('IWorker')\n}\n"]}