{"version":3,"sources":["../../../src/interfaces/queue/queue-connection.interface.ts"],"names":["IQueueConnection"],"mappings":";;;;;;;;;;;AA4HiB,IAAA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AACE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAD/B,EAAA,gBAAA,KAAA,gBAAA,GAAA,EAAA,CAAA,CAAA","file":"queue-connection.interface.mjs","sourcesContent":["import type { IQueueable } from \"./queueable.interface\"\n\n/**\n * Interface for queue connections.\n * Queue connections are responsible for processing queueable jobs.\n */\nexport interface IQueueConnection {\n  /**\n   * Push a new job onto the queue.\n   *\n   * @param {IQueueable} job - The job to queue\n   * @param {any} data - Additional data for the job\n   * @param {string} [queue] - The queue to push to\n   * @returns {Promise<void>}\n   */\n  push(job: IQueueable, data: any, queue?: string): Promise<void>\n\n  /**\n   * Push a new job onto the queue after a delay.\n   *\n   * @param {number} delay - The delay in seconds\n   * @param {IQueueable} job - The job to queue\n   * @param {any} data - Additional data for the job\n   * @param {string} [queue] - The queue to push to\n   * @returns {Promise<void>}\n   */\n  later(delay: number, job: IQueueable, data: any, queue?: string): Promise<void>\n\n  /**\n   * Push an array of jobs onto the queue.\n   *\n   * @param {IQueueable[]} jobs - The jobs to queue\n   * @param {any} data - Additional data for the jobs\n   * @param {string} [queue] - The queue to push to\n   * @returns {Promise<void>}\n   */\n  bulk(jobs: IQueueable[], data: any, queue?: string): Promise<void>\n\n  /**\n   * Process jobs in a queue.\n   *\n   * @param {string} [queue] - The queue to process\n   * @param {number} [count=1] - The number of jobs to process\n   * @returns {Promise<number>} The number of jobs processed\n   */\n  process(queue?: string, count?: number): Promise<number>\n\n  /**\n   * Get the number of jobs in a queue.\n   *\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<number>} The number of jobs\n   */\n  size(queue?: string): Promise<number>\n\n  /**\n   * Get the number of delayed jobs in a queue.\n   *\n   * @param {string} [queue] - The queue name\n   * @returns {Promise<number>} The number of delayed jobs\n   */\n  delayedSize(queue?: string): Promise<number>\n\n  /**\n   * Clear all jobs in a queue.\n   *\n   * @param {string} [queue] - The queue to clear\n   * @returns {Promise<void>}\n   */\n  clear(queue?: string): Promise<void>\n\n  /**\n   * Clear all queues.\n   *\n   * @returns {Promise<void>}\n   */\n  clearAll(): Promise<void>\n\n  /**\n   * Release a job back onto the queue.\n   *\n   * @param {IQueueable} job - The job to release\n   * @param {any} data - The job data\n   * @param {number} [delay=0] - The delay in seconds\n   * @param {string} [queue] - The queue to release to\n   * @returns {Promise<void>}\n   */\n  release(job: IQueueable, data: any, delay?: number, queue?: string): Promise<void>\n\n  /**\n   * Move a job to the failed queue.\n   *\n   * @param {IQueueable} job - The failed job\n   * @param {any} data - The job data\n   * @param {Error} error - The error that caused the failure\n   * @returns {Promise<void>}\n   */\n  failed(job: IQueueable, data: any, error: Error): Promise<void>\n\n  /**\n   * Get the name of the connection.\n   *\n   * @returns {string} The connection name\n   */\n  getName(): string\n\n  /**\n   * Get the default queue for the connection.\n   *\n   * @returns {string} The default queue name\n   */\n  getDefaultQueue(): string\n\n  /**\n   * Set the default queue for the connection.\n   *\n   * @param {string} queue - The default queue name\n   */\n  setDefaultQueue(queue: string): void\n}\n\n/**\n * DI token for IQueueConnection interface\n */\nexport namespace IQueueConnection {\n  export const $ = Symbol.for(\"IQueueConnection\")\n}\n"]}