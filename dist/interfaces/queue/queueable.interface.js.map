{"version":3,"sources":["../../../src/interfaces/queue/queueable.interface.ts"],"names":["IQueueable"],"mappings":";;;;;;;;;;;;;AAsFiBA;AAAA,CAAV,CAAUA,WAAV,KAAA;AACE,EAAMA,WAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAAA,CADzB,EAAAA,kBAAA,KAAAA,kBAAA,GAAA,EAAA,CAAA,CAAA","file":"queueable.interface.js","sourcesContent":["import type { IShouldQueue } from \"./should-queue.interface\"\n\n/**\n * Interface for queueable jobs.\n * Queueable items can be processed asynchronously through a queue.\n */\nexport interface IQueueable extends IShouldQueue {\n  /**\n   * Get the middleware the job should pass through.\n   *\n   * @returns {string[]} Array of middleware names\n   */\n  middleware?(): string[]\n\n  /**\n   * Determine if the job should be encrypted.\n   *\n   * @returns {boolean} Whether the job should be encrypted\n   */\n  shouldBeEncrypted?(): boolean\n\n  /**\n   * Handle the job.\n   * This method is called when the job is processed from the queue.\n   *\n   * @param {any} data - The job data\n   * @returns {Promise<void> | void} - May return a promise for async handling\n   */\n  handle(data: any): Promise<void> | void\n\n  /**\n   * Handle a job failure.\n   *\n   * @param {Error} error - The error that caused the failure\n   * @returns {Promise<void> | void} - May return a promise for async handling\n   */\n  failed?(error: Error): Promise<void> | void\n\n  /**\n   * The number of times the job may be attempted.\n   *\n   * @returns {number} The number of attempts\n   */\n  tries?(): number\n\n  /**\n   * The number of seconds to wait before retrying a job that has failed.\n   *\n   * @returns {number} The number of seconds to wait\n   */\n  backoff?(): number\n\n  /**\n   * The maximum number of unhandled exceptions to allow before failing.\n   *\n   * @returns {number} The number of exceptions allowed\n   */\n  maxExceptions?(): number\n\n  /**\n   * Determine if the job should be released back onto the queue.\n   *\n   * @param {Error} error - The error that caused the release\n   * @returns {boolean} True if the job should be released\n   */\n  shouldRelease?(error: Error): boolean\n\n  /**\n   * Calculate the number of seconds to wait before retrying the job.\n   *\n   * @param {number} attempt - The number of attempts that have been made\n   * @returns {number} The number of seconds to wait\n   */\n  retryAfter?(attempt: number): number\n\n  /**\n   * Get the timeout for the job.\n   *\n   * @returns {number} The timeout in seconds\n   */\n  timeout?(): number\n}\n\n/**\n * DI token for IQueueable interface\n */\nexport namespace IQueueable {\n  export const $ = Symbol.for(\"IQueueable\")\n}\n"]}