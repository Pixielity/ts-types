{"version":3,"sources":["../../../src/interfaces/queue/queue-manager.interface.ts"],"names":["IQueueManager"],"mappings":";;;;;;;;;;;;;AAwJiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AACE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAD5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"queue-manager.interface.js","sourcesContent":["import type { IQueueConnection } from './queue-connection.interface'\nimport type { IQueueable } from './queueable.interface'\nimport { IWorker } from './worker.interface'\n\n/**\n * Interface for the queue manager.\n * The queue manager is responsible for managing queue connections and dispatching jobs.\n */\nexport interface IQueueManager {\n  /**\n   * Add a queue connection.\n   *\n   * @param name - The connection name\n   * @param connection - The queue connection\n   */\n  addConnection(name: string, connection: IQueueConnection): void\n\n  /**\n   * Get a queue connection by name.\n   *\n   * @param name - The connection name (or default if not provided)\n   * @returns The queue connection\n   */\n  connection(name?: string): IQueueConnection\n\n  /**\n   * Set the default connection name.\n   *\n   * @param name - The default connection name\n   */\n  setDefaultConnection(name: string): void\n\n  /**\n   * Create a worker for a connection and queue.\n   *\n   * @param connectionName - The connection name\n   * @param queue - The queue name\n   * @returns The worker\n   */\n  createWorker(connectionName?: string, queue?: string): IWorker\n\n  /**\n   * Push a new job onto the queue.\n   *\n   * @param job - The job to queue\n   * @param data - Additional data for the job\n   * @param connectionName - The connection name\n   * @param queue - The queue name\n   * @returns Promise resolving when the job is pushed\n   */\n  push(\n    job: IQueueable,\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Push a new job onto the queue after a delay.\n   *\n   * @param delay - The delay in seconds\n   * @param job - The job to queue\n   * @param data - Additional data for the job\n   * @param connectionName - The connection name\n   * @param queue - The queue name\n   * @returns Promise resolving when the job is pushed\n   */\n  later(\n    delay: number,\n    job: IQueueable,\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Push an array of jobs onto the queue.\n   *\n   * @param jobs - The jobs to queue\n   * @param data - Additional data for the jobs\n   * @param connectionName - The connection name\n   * @param queue - The queue name\n   * @returns Promise resolving when all jobs are pushed\n   */\n  bulk(\n    jobs: IQueueable[],\n    data: any,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Release a job back onto the queue.\n   *\n   * @param job - The job to release\n   * @param data - The job data\n   * @param delay - The delay in seconds\n   * @param connectionName - The connection name\n   * @param queue - The queue name\n   * @returns Promise resolving when the job is released\n   */\n  release(\n    job: IQueueable,\n    data: any,\n    delay?: number,\n    connectionName?: string | null,\n    queue?: string | null,\n  ): Promise<void>\n\n  /**\n   * Move a job to the failed queue.\n   *\n   * @param job - The failed job\n   * @param data - The job data\n   * @param error - The error that caused the failure\n   * @param connectionName - The connection name\n   * @returns Promise resolving when the job is moved\n   */\n  failed(job: IQueueable, data: any, error: Error, connectionName?: string | null): Promise<void>\n\n  /**\n   * Report progress for a job.\n   *\n   * @param job - The job to report progress for\n   * @param data - The job data\n   * @param progress - The progress percentage (0-100)\n   * @param progressData - Additional progress data\n   * @param connectionName - The connection name\n   * @returns Promise resolving when the progress is reported\n   */\n  reportProgress(\n    job: IQueueable,\n    data: any,\n    progress: number,\n    progressData?: any,\n    connectionName?: string | null,\n  ): Promise<void>\n\n  /**\n   * Listen for job events.\n   *\n   * @param event - The event name\n   * @param callback - The callback function\n   * @param connectionName - The connection name\n   * @returns A function to remove the listener\n   */\n  on(event: string, callback: (data: any) => void, connectionName?: string | null): () => void\n}\n\n/**\n * DI token for IQueueManager interface\n */\nexport namespace IQueueManager {\n  export const $ = Symbol.for('IQueueManager')\n}\n"]}