{"version":3,"sources":["../../../src/interfaces/queue/queue-connection.interface.ts"],"names":["IQueueConnection"],"mappings":";;;;;;;;;;;;;AAsNiBA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AACE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAD/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA","file":"queue-connection.interface.js","sourcesContent":["import type { IQueueable } from './queueable.interface'\n\n/**\n * Interface for queue connections.\n * Queue connections are responsible for processing queueable jobs.\n */\nexport interface IQueueConnection {\n  /**\n   * Set the key prefix for queue items.\n   *\n   * @param prefix - The prefix to use\n   */\n  setKeyPrefix(prefix: string): void\n\n  /**\n   * Push a new job onto the queue.\n   *\n   * @param job - The job to queue\n   * @param data - Additional data for the job\n   * @param queue - The queue to push to\n   * @returns Promise resolving when the job is pushed\n   */\n  push(job: IQueueable, data: any, queue?: string): Promise<void>\n\n  /**\n   * Push a new job onto the queue after a delay.\n   *\n   * @param delay - The delay in seconds\n   * @param job - The job to queue\n   * @param data - Additional data for the job\n   * @param queue - The queue to push to\n   * @returns Promise resolving when the job is pushed\n   */\n  later(delay: number, job: IQueueable, data: any, queue?: string): Promise<void>\n\n  /**\n   * Push an array of jobs onto the queue.\n   *\n   * @param jobs - The jobs to queue\n   * @param data - Additional data for the jobs\n   * @param queue - The queue to push to\n   * @returns Promise resolving when all jobs are pushed\n   */\n  bulk(jobs: IQueueable[], data: any, queue?: string): Promise<void>\n\n  /**\n   * Process jobs in a queue.\n   *\n   * @param queue - The queue to process\n   * @param count - The number of jobs to process\n   * @returns The number of jobs processed\n   */\n  process(queue?: string, count?: number): Promise<number>\n\n  /**\n   * Get the number of jobs in a queue.\n   *\n   * @param queue - The queue name\n   * @returns The number of jobs\n   */\n  size(queue?: string): Promise<number>\n\n  /**\n   * Get the number of delayed jobs in a queue.\n   *\n   * @param queue - The queue name\n   * @returns The number of delayed jobs\n   */\n  delayedSize(queue?: string): Promise<number>\n\n  /**\n   * Clear all jobs in a queue.\n   *\n   * @param queue - The queue to clear\n   * @returns Promise resolving when the queue is cleared\n   */\n  clear(queue?: string): Promise<void>\n\n  /**\n   * Clear all queues.\n   *\n   * @returns Promise resolving when all queues are cleared\n   */\n  clearAll(): Promise<void>\n\n  /**\n   * Release a job back onto the queue.\n   *\n   * @param job - The job to release\n   * @param data - The job data\n   * @param delay - The delay in seconds\n   * @param queue - The queue to release to\n   * @returns Promise resolving when the job is released\n   */\n  release(job: IQueueable, data: any, delay?: number, queue?: string): Promise<void>\n\n  /**\n   * Move a job to the failed queue.\n   *\n   * @param job - The failed job\n   * @param data - The job data\n   * @param error - The error that caused the failure\n   * @returns Promise resolving when the job is moved\n   */\n  failed(job: IQueueable, data: any, error: Error): Promise<void>\n\n  /**\n   * Report progress for a job.\n   *\n   * @param job - The job to report progress for\n   * @param data - The job data\n   * @param progress - The progress percentage (0-100)\n   * @param progressData - Additional progress data\n   * @returns Promise resolving when the progress is reported\n   */\n  reportProgress?(job: IQueueable, data: any, progress: number, progressData?: any): Promise<void>\n\n  /**\n   * Listen for job events.\n   *\n   * @param event - The event name\n   * @param callback - The callback function\n   * @returns A function to remove the listener\n   */\n  on?(event: string, callback: (data: any) => void): () => void\n\n  /**\n   * Get all queues.\n   *\n   * @returns Promise resolving with an array of queue names\n   */\n  getQueues(): Promise<string[]>\n\n  /**\n   * Get all jobs in a queue.\n   *\n   * @param queue - The queue name\n   * @returns Promise resolving with an array of jobs\n   */\n  getJobs(\n    queue?: string,\n  ): Promise<Array<{ id: string; job: IQueueable; data: any; executeAt: number; attempts: number }>>\n\n  /**\n   * Get all failed jobs.\n   *\n   * @returns Promise resolving with an array of failed jobs\n   */\n  getFailedJobs(): Promise<\n    Array<{ id: string; job: IQueueable; data: any; error: Error; failedAt: number }>\n  >\n\n  /**\n   * Retry a failed job.\n   *\n   * @param id - The ID of the failed job\n   * @returns Promise resolving when the job is retried\n   */\n  retryFailed(id: string): Promise<void>\n\n  /**\n   * Retry all failed jobs.\n   *\n   * @returns Promise resolving with the number of jobs retried\n   */\n  retryAllFailed(): Promise<number>\n\n  /**\n   * Delete a failed job.\n   *\n   * @param id - The ID of the failed job\n   * @returns Promise resolving when the job is deleted\n   */\n  forgetFailed(id: string): Promise<void>\n\n  /**\n   * Delete all failed jobs.\n   *\n   * @returns Promise resolving when all failed jobs are deleted\n   */\n  flushFailed(): Promise<void>\n\n  /**\n   * Store a restart signal.\n   *\n   * @returns Promise resolving when the signal is stored\n   */\n  storeRestartSignal(): Promise<void>\n\n  /**\n   * Store a stop signal.\n   *\n   * @returns Promise resolving when the signal is stored\n   */\n  storeStopSignal(): Promise<void>\n\n  /**\n   * Check if a restart signal exists.\n   *\n   * @returns Promise resolving with true if a restart signal exists\n   */\n  shouldRestart(): Promise<boolean>\n\n  /**\n   * Check if a stop signal exists.\n   *\n   * @returns Promise resolving with true if a stop signal exists\n   */\n  shouldStop(): Promise<boolean>\n}\n\n/**\n * DI token for IQueueConnection interface\n */\nexport namespace IQueueConnection {\n  export const $ = Symbol.for('IQueueConnection')\n}\n"]}