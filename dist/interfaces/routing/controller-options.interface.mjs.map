{"version":3,"sources":["../../../src/interfaces/routing/controller-options.interface.ts"],"names":["IControllerOptions"],"mappings":";;;;;;;;;;;AA4CiB,IAAA;AAAA,CAAV,CAAUA,mBAAV,KAAA;AAIE,EAAMA,mBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,oBAAoB,CAAA;AAAA,CAJjC,EAAA,kBAAA,KAAA,kBAAA,GAAA,EAAA,CAAA,CAAA","file":"controller-options.interface.mjs","sourcesContent":["/**\n * Options for the Controller decorator\n * Configures controller-specific behavior\n */\nexport interface IControllerOptions {\n  /**\n   * Controller-specific middleware\n   * These are executed for all routes in the controller\n   */\n  middleware?: any[]\n\n  /**\n   * Controller-specific guards\n   * These are executed for all routes in the controller\n   */\n  guards?: any[]\n\n  /**\n   * The API version this controller belongs to\n   * Used when versioning is enabled in router configuration\n   */\n  version?: string\n\n  /**\n   * Additional metadata for the controller\n   * Can be used for documentation, validation, or custom extensions\n   */\n  metadata?: Record<string, any>\n\n  /**\n   * Controller description for documentation\n   */\n  description?: string\n\n  /**\n   * Whether the controller is deprecated\n   * @default false\n   */\n  deprecated?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IControllerOptions {\n  /**\n   * Symbol for injecting the controller options service\n   */\n  export const $ = Symbol.for(\"IControllerOptions\")\n}\n"]}