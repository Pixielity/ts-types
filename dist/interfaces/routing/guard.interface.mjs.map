{"version":3,"sources":["../../../src/interfaces/routing/guard.interface.ts"],"names":["IGuard"],"mappings":";;;;;;;;;;;AAqBiB,IAAA;AAAA,CAAV,CAAUA,OAAV,KAAA;AAIE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,CAJrB,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,CAAA,CAAA","file":"guard.interface.mjs","sourcesContent":["import type { NextApiRequest, NextApiResponse } from \"next\"\n\n/**\n * Interface for route guards\n * Guards determine whether a route handler should be executed\n * They are typically used for authentication and authorization\n */\nexport interface IGuard {\n  /**\n   * Check if the request is allowed to proceed to the route handler\n   *\n   * @param req - The Next.js API request\n   * @param res - The Next.js API response\n   * @returns A boolean or promise resolving to a boolean indicating whether the request should proceed\n   */\n  canActivate(req: NextApiRequest, res: NextApiResponse): Promise<boolean> | boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IGuard {\n  /**\n   * Symbol for injecting the guard service\n   */\n  export const $ = Symbol.for(\"IGuard\")\n}\n"]}