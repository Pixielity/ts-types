{"version":3,"sources":["../../../src/interfaces/routing/controller.interface.ts","../../../src/interfaces/routing/controller-options.interface.ts","../../../src/interfaces/routing/route.interface.ts","../../../src/interfaces/routing/route-options.interface.ts","../../../src/interfaces/routing/middleware.interface.ts","../../../src/interfaces/routing/guard.interface.ts","../../../src/interfaces/routing/param-metadata.interface.ts","../../../src/interfaces/routing/router-config.interface.ts","../../../src/interfaces/routing/route-definition.interface.ts","../../../src/interfaces/routing/controller-definition.interface.ts"],"names":["IController","IControllerOptions","IRouteHandler","IRouteOptions","IMiddleware","IGuard","IParamMetadata","IRouterConfig","IRouteDefinition","IControllerDefinition"],"mappings":";;;;;;;;;;;AAeiB,IAAA;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAA,WAAA,KAAA,WAAA,GAAA,EAAA,CAAA,CAAA;;;AC6BA,IAAA;AAAA,CAAV,CAAUC,mBAAV,KAAA;AAIE,EAAMA,mBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,oBAAoB,CAAA;AAAA,CAJjC,EAAA,kBAAA,KAAA,kBAAA,GAAA,EAAA,CAAA,CAAA;;;ACvBA,IAAA;AAAA,CAAV,CAAUC,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA;;;ACiBA,IAAA;AAAA,CAAV,CAAUC,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA;;;AChBA,IAAA;AAAA,CAAV,CAAUC,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAA,WAAA,KAAA,WAAA,GAAA,EAAA,CAAA,CAAA;;;ACDA,IAAA;AAAA,CAAV,CAAUC,OAAV,KAAA;AAIE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,CAJrB,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,CAAA,CAAA;;;ACMA,IAAA;AAAA,CAAV,CAAUC,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAA,cAAA,KAAA,cAAA,GAAA,EAAA,CAAA,CAAA;;;ACmBA,IAAA;AAAA,CAAV,CAAUC,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAA,aAAA,KAAA,aAAA,GAAA,EAAA,CAAA,CAAA;;;ACCA,IAAA;AAAA,CAAV,CAAUC,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAA,gBAAA,KAAA,gBAAA,GAAA,EAAA,CAAA,CAAA;;;ACNA,IAAA;AAAA,CAAV,CAAUC,sBAAV,KAAA;AAIE,EAAMA,sBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,uBAAuB,CAAA;AAAA,CAJpC,EAAA,qBAAA,KAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.mjs","sourcesContent":["/**\n * Interface for route controllers\n * Defines the contract that all controller classes must implement\n */\nexport interface IController {\n  /**\n   * The constructor of the controller\n   * Controllers should be instantiable with dependency injection\n   */\n  new (...args: any[]): any\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IController {\n  /**\n   * Symbol for injecting the controller service\n   */\n  export const $ = Symbol.for('IController')\n}\n","/**\n * Options for the Controller decorator\n * Configures controller-specific behavior\n */\nexport interface IControllerOptions {\n  /**\n   * Controller-specific middleware\n   * These are executed for all routes in the controller\n   */\n  middleware?: any[]\n\n  /**\n   * Controller-specific guards\n   * These are executed for all routes in the controller\n   */\n  guards?: any[]\n\n  /**\n   * The API version this controller belongs to\n   * Used when versioning is enabled in router configuration\n   */\n  version?: string\n\n  /**\n   * Additional metadata for the controller\n   * Can be used for documentation, validation, or custom extensions\n   */\n  metadata?: Record<string, any>\n\n  /**\n   * Controller description for documentation\n   */\n  description?: string\n\n  /**\n   * Whether the controller is deprecated\n   * @default false\n   */\n  deprecated?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IControllerOptions {\n  /**\n   * Symbol for injecting the controller options service\n   */\n  export const $ = Symbol.for('IControllerOptions')\n}\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\n/**\n * Interface for route handlers\n * Route handlers process requests and generate responses\n */\nexport interface IRouteHandler {\n  /**\n   * The route handler function\n   *\n   * @param req - The Next.js API request\n   * @param res - The Next.js API response\n   * @param args - Additional arguments provided by parameter decorators\n   * @returns The response data or a promise resolving to the response data\n   */\n  (req: NextApiRequest, res: NextApiResponse, ...args: any[]): Promise<any> | any\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IRouteHandler {\n  /**\n   * Symbol for injecting the route handler service\n   */\n  export const $ = Symbol.for('IRouteHandler')\n}\n","/**\n * Options for the Route decorator\n * Configures route-specific behavior\n */\nexport interface IRouteOptions {\n  /**\n   * Route-specific middleware\n   * These are executed after controller middleware but before the route handler\n   */\n  middleware?: any[]\n\n  /**\n   * Route-specific guards\n   * These are executed after controller guards but before the route handler\n   */\n  guards?: any[]\n\n  /**\n   * Additional metadata for the route\n   * Can be used for documentation, validation, or custom extensions\n   */\n  metadata?: Record<string, any>\n\n  /**\n   * Whether the route is deprecated\n   * @default false\n   */\n  deprecated?: boolean\n\n  /**\n   * Route description for documentation\n   */\n  description?: string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IRouteOptions {\n  /**\n   * Symbol for injecting the route options service\n   */\n  export const $ = Symbol.for('IRouteOptions')\n}\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\n/**\n * Interface for route middleware\n * Middleware intercepts requests before they reach the route handler\n * and can modify the request/response or terminate the request early\n */\nexport interface IMiddleware {\n  /**\n   * Middleware handler function\n   *\n   * @param req - The Next.js API request\n   * @param res - The Next.js API response\n   * @param next - The next function to call to continue the middleware chain\n   * @returns A promise that resolves when the middleware has completed\n   */\n  (req: NextApiRequest, res: NextApiResponse, next: () => Promise<void>): Promise<void>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IMiddleware {\n  /**\n   * Symbol for injecting the middleware service\n   */\n  export const $ = Symbol.for('IMiddleware')\n}\n","import type { NextApiRequest, NextApiResponse } from 'next'\n\n/**\n * Interface for route guards\n * Guards determine whether a route handler should be executed\n * They are typically used for authentication and authorization\n */\nexport interface IGuard {\n  /**\n   * Check if the request is allowed to proceed to the route handler\n   *\n   * @param req - The Next.js API request\n   * @param res - The Next.js API response\n   * @returns A boolean or promise resolving to a boolean indicating whether the request should proceed\n   */\n  canActivate(req: NextApiRequest, res: NextApiResponse): Promise<boolean> | boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IGuard {\n  /**\n   * Symbol for injecting the guard service\n   */\n  export const $ = Symbol.for('IGuard')\n}\n","import type { ParamType } from '../../enums'\n\n/**\n * Interface for parameter metadata\n * Describes how controller method parameters should be resolved\n */\nexport interface IParamMetadata {\n  /**\n   * The parameter index in the method signature\n   */\n  index: number\n\n  /**\n   * The parameter type (e.g., PARAM, QUERY, BODY)\n   */\n  type: ParamType\n\n  /**\n   * The parameter name to extract from the request\n   * If null, the entire object of the specified type is passed\n   */\n  name: string | null\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IParamMetadata {\n  /**\n   * Symbol for injecting the param metadata service\n   */\n  export const $ = Symbol.for('IParamMetadata')\n}\n","/**\n * Interface for router configuration\n * Defines global settings for the router\n */\nexport interface IRouterConfig {\n  /**\n   * The base path for all routes\n   * @default \"/api\"\n   */\n  basePath?: string\n\n  /**\n   * Whether to automatically register controllers\n   * When true, controllers are discovered and registered at startup\n   * @default true\n   */\n  autoRegister?: boolean\n\n  /**\n   * Default middleware for all routes\n   * These are executed before controller and route middleware\n   */\n  globalMiddleware?: any[]\n\n  /**\n   * Default guards for all routes\n   * These are executed before controller and route guards\n   */\n  globalGuards?: any[]\n\n  /**\n   * Whether to enable versioning for API routes\n   * @default false\n   */\n  enableVersioning?: boolean\n\n  /**\n   * The versioning strategy to use\n   * @default \"uri\"\n   */\n  versioningStrategy?: 'uri' | 'header' | 'query'\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IRouterConfig {\n  /**\n   * Symbol for injecting the router config service\n   */\n  export const $ = Symbol.for('IRouterConfig')\n}\n","import type { HttpMethod } from '../../types'\nimport type { IParamMetadata } from './param-metadata.interface'\n\n/**\n * Interface for route definitions\n * Contains all metadata needed to register and handle a route\n */\nexport interface IRouteDefinition {\n  /**\n   * The HTTP method for the route (GET, POST, etc.)\n   */\n  method: HttpMethod\n\n  /**\n   * The route path relative to the controller prefix\n   */\n  path: string\n\n  /**\n   * The handler method name in the controller class\n   */\n  handlerName: string | symbol\n\n  /**\n   * The route-specific middleware (executed after controller middleware)\n   */\n  middleware: any[]\n\n  /**\n   * The route-specific guards (executed after controller guards)\n   */\n  guards: any[]\n\n  /**\n   * The parameter metadata for dependency injection\n   */\n  params: IParamMetadata[]\n\n  /**\n   * Additional metadata for custom extensions\n   */\n  metadata: Record<string, any>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IRouteDefinition {\n  /**\n   * Symbol for injecting the route definition service\n   */\n  export const $ = Symbol.for('IRouteDefinition')\n}\n","import type { IRouteDefinition } from './route-definition.interface'\n\n/**\n * Interface for controller definitions\n * Contains all metadata needed to register and handle a controller\n */\nexport interface IControllerDefinition {\n  /**\n   * The controller constructor\n   */\n  controller: any\n\n  /**\n   * The route prefix for all routes in this controller\n   */\n  prefix: string\n\n  /**\n   * The controller-level middleware (applied to all routes)\n   */\n  middleware: any[]\n\n  /**\n   * The controller-level guards (applied to all routes)\n   */\n  guards: any[]\n\n  /**\n   * The controller routes\n   */\n  routes: IRouteDefinition[]\n\n  /**\n   * Additional metadata for custom extensions\n   */\n  metadata: Record<string, any>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IControllerDefinition {\n  /**\n   * Symbol for injecting the controller definition service\n   */\n  export const $ = Symbol.for('IControllerDefinition')\n}\n"]}