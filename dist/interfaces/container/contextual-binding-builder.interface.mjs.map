{"version":3,"sources":["../../../src/interfaces/container/contextual-binding-builder.interface.ts"],"names":["IContextualBindingBuilder","IContextualBindingBuilderFactory"],"mappings":";;;;;;;;;;;AAwCiB,IAAA;AAAA,CAAV,CAAUA,0BAAV,KAAA;AAIE,EAAMA,0BAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,2BAA2B,CAAA;AAAA,CAJxC,EAAA,yBAAA,KAAA,yBAAA,GAAA,EAAA,CAAA,CAAA;AAUA,IAAA;AAAA,CAAV,CAAUC,iCAAV,KAAA;AAIE,EAAMA,iCAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kCAAkC,CAAA;AAAA,CAJ/C,EAAA,gCAAA,KAAA,gCAAA,GAAA,EAAA,CAAA,CAAA","file":"contextual-binding-builder.interface.mjs","sourcesContent":["import type { IContainer } from \"./container.interface\"\nimport type { IContextualBindingImplementationBuilder } from \"./contextual-binding-implementation-builder.interface\"\n\n/**\n * Interface for the contextual binding builder\n * Represents the \"needs\" part of the contextual binding chain\n */\nexport interface IContextualBindingBuilder {\n  /**\n   * Define the abstract type that the contextual binding is for\n   *\n   * @param abstract - The abstract type that the concrete implementation needs\n   * @returns A builder for defining the implementation\n   *\n   * @example\n   * \\`\\`\\`typescript\n   * // Define what the PhotoController needs\n   * container.when('photoController').needs('filesystem');\n   *\n   * // Define what the UserService needs\n   * container.when(UserService).needs('repository');\n   * \\`\\`\\`\n   */\n  needs(abstract: string | Function): IContextualBindingImplementationBuilder\n}\n\n/**\n * Factory function to create a contextual binding builder\n *\n * @param container - The container instance\n * @param concrete - The concrete implementation that needs a dependency\n * @returns A new contextual binding builder instance\n */\nexport interface IContextualBindingBuilderFactory {\n  make(container: IContainer, concrete: string | Function): IContextualBindingBuilder\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextualBindingBuilder {\n  /**\n   * Symbol for injecting the contextual binding builder service\n   */\n  export const $ = Symbol.for(\"IContextualBindingBuilder\")\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextualBindingBuilderFactory {\n  /**\n   * Symbol for injecting the contextual binding builder factory service\n   */\n  export const $ = Symbol.for(\"IContextualBindingBuilderFactory\")\n}\n"]}