{"version":3,"sources":["../../../src/interfaces/container/contextual-binding-implementation-builder.interface.ts"],"names":["IContextualBindingImplementationBuilder"],"mappings":";;;;;;;;;;;;;AA4BiBA;AAAA,CAAV,CAAUA,wCAAV,KAAA;AAIE,EAAMA,wCAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,yCAAyC,CAAA;AAAA,CAJtD,EAAAA,+CAAA,KAAAA,+CAAA,GAAA,EAAA,CAAA,CAAA","file":"contextual-binding-implementation-builder.interface.js","sourcesContent":["import type { IContainer } from './container.interface'\n\n/**\n * Interface for the contextual binding implementation builder\n * Represents the \"give\" part of the contextual binding chain\n */\nexport interface IContextualBindingImplementationBuilder {\n  /**\n   * Define the implementation to use for the contextual binding\n   *\n   * @param implementation - The implementation to use\n   * @returns The container instance\n   *\n   * @example\n   * \\`\\`\\`typescript\n   * // Bind a concrete implementation for a specific context\n   * container.when('photoController').needs('filesystem').give(new LocalFilesystem());\n   *\n   * // Bind a factory function for a specific context\n   * container.when('videoController').needs('filesystem').give(() => new CloudFilesystem());\n   * \\`\\`\\`\n   */\n  give(implementation: any): IContainer\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContextualBindingImplementationBuilder {\n  /**\n   * Symbol for injecting the contextual binding implementation builder service\n   */\n  export const $ = Symbol.for('IContextualBindingImplementationBuilder')\n}\n"]}