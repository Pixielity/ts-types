{"version":3,"sources":["../../../src/interfaces/events/event.interface.ts"],"names":["IEvent"],"mappings":";;;;;;;;;;;;;AAkCiBA;AAAA,CAAV,CAAUA,OAAV,KAAA;AACE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,CADrB,EAAAA,cAAA,KAAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"event.interface.js","sourcesContent":["/**\n * Interface for all events in the system.\n * Events are objects that represent something that has happened in the application.\n * They can be dispatched and listened to by event listeners.\n */\nexport interface IEvent {\n  /**\n   * Optional method to get the event name.\n   * If not provided, the class name will be used.\n   */\n  getEventName?(): string\n\n  /**\n   * Optional method to determine if the event should be broadcast.\n   * @returns {boolean} Whether the event should be broadcast\n   */\n  shouldBroadcast?(): boolean\n\n  /**\n   * Optional method to get the channels the event should broadcast on.\n   * @returns {string[]} Array of channel names\n   */\n  broadcastOn?(): string[]\n\n  /**\n   * Optional method to get the broadcast data.\n   * @returns {Record<string, any>} Data to broadcast\n   */\n  broadcastWith?(): Record<string, any>\n}\n\n/**\n * DI token for IEvent interface\n */\nexport namespace IEvent {\n  export const $ = Symbol.for('IEvent')\n}\n"]}