{"version":3,"sources":["../../../src/interfaces/events/subscriber.interface.ts"],"names":["ISubscriber"],"mappings":";;;;;;;;;;;;;AAmBiBA;AAAA,CAAV,CAAUA,YAAV,KAAA;AACE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAD1B,EAAAA,mBAAA,KAAAA,mBAAA,GAAA,EAAA,CAAA,CAAA","file":"subscriber.interface.js","sourcesContent":["import type { IEventDispatcher } from \"./dispatcher.interface\"\n\n/**\n * Interface for event subscribers.\n * Subscribers can listen to multiple events and register multiple listeners.\n */\nexport interface ISubscriber {\n  /**\n   * Register the listeners for the subscriber.\n   * This method is called when the subscriber is registered with the dispatcher.\n   *\n   * @param {IEventDispatcher} dispatcher - The event dispatcher\n   */\n  subscribe(dispatcher: IEventDispatcher): void\n}\n\n/**\n * DI token for ISubscriber interface\n */\nexport namespace ISubscriber {\n  export const $ = Symbol.for(\"ISubscriber\")\n}\n"]}