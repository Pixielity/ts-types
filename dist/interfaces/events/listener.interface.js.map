{"version":3,"sources":["../../../src/interfaces/events/listener.interface.ts"],"names":["IListener"],"mappings":";;;;;;;;;;;;;AAoBiBA;AAAA,CAAV,CAAUA,UAAV,KAAA;AACE,EAAMA,UAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA,CADxB,EAAAA,iBAAA,KAAAA,iBAAA,GAAA,EAAA,CAAA,CAAA","file":"listener.interface.js","sourcesContent":["import type { IEvent } from './event.interface'\n\n/**\n * Interface for all event listeners in the system.\n * Listeners are responsible for handling events when they are dispatched.\n */\nexport interface IListener<E extends IEvent = IEvent> {\n  /**\n   * Handle the event.\n   * This method is called when the event is dispatched.\n   *\n   * @param {E} event - The event object\n   * @returns {Promise<void> | void} - May return a promise for async handling\n   */\n  handle(event: E): Promise<void> | void\n}\n\n/**\n * DI token for IListener interface\n */\nexport namespace IListener {\n  export const $ = Symbol.for('IListener')\n}\n"]}