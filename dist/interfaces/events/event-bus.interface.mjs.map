{"version":3,"sources":["../../../src/interfaces/events/event-bus.interface.ts"],"names":["IEventBus"],"mappings":";;;;;;;;;;;AAkFiB,IAAA;AAAA,CAAV,CAAUA,UAAV,KAAA;AACE,EAAMA,UAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA,CADxB,EAAA,SAAA,KAAA,SAAA,GAAA,EAAA,CAAA,CAAA","file":"event-bus.interface.mjs","sourcesContent":["import type { Observable } from 'rxjs'\nimport type { IEvent } from './event.interface'\nimport type { IEventData } from './event-data.interface'\n\n/**\n * Interface for the event bus\n * The event bus provides a centralized mechanism for dispatching and subscribing to events\n */\nexport interface IEventBus {\n  /**\n   * Get an observable of all events\n   *\n   * @returns An observable of all events\n   */\n  events(): Observable<IEventData>\n\n  /**\n   * Get an observable of events with a specific name\n   *\n   * @param eventName - The event name\n   * @returns An observable of events with the specified name\n   */\n  ofType(eventName: string): Observable<IEventData>\n\n  /**\n   * Get an observable of events of a specific class\n   *\n   * @param eventClass - The event class\n   * @returns An observable of events of the specified class\n   */\n  ofClass<T extends IEvent>(eventClass: new (...args: any[]) => T): Observable<IEventData<T>>\n\n  /**\n   * Get an observable of event payloads with a specific name\n   *\n   * @param eventName - The event name\n   * @returns An observable of event payloads with the specified name\n   */\n  on<T = any>(eventName: string): Observable<T>\n\n  /**\n   * Get an observable of event payloads of a specific class\n   *\n   * @param eventClass - The event class\n   * @returns An observable of event payloads of the specified class\n   */\n  onEvent<T extends IEvent>(eventClass: new (...args: any[]) => T): Observable<T>\n\n  /**\n   * Dispatch an event through the event bus\n   *\n   * @param event - The event to dispatch\n   * @param payload - Optional payload if event is a string\n   * @returns A promise that resolves when the event has been dispatched\n   */\n  dispatch(event: string | IEvent, payload?: any): Promise<any[]>\n\n  /**\n   * Register a callback for a specific event\n   *\n   * @param eventName - The event name\n   * @param callback - The callback function\n   * @returns A function to unregister the callback\n   */\n  subscribe<T = any>(eventName: string, callback: (data: T) => void): () => void\n\n  /**\n   * Register a callback for a specific event class\n   *\n   * @param eventClass - The event class\n   * @param callback - The callback function\n   * @returns A function to unregister the callback\n   */\n  subscribeToEvent<T extends IEvent>(\n    eventClass: new (...args: any[]) => T,\n    callback: (event: T) => void,\n  ): () => void\n}\n\n/**\n * DI token for IEventBus interface\n */\nexport namespace IEventBus {\n  export const $ = Symbol.for('IEventBus')\n}\n"]}