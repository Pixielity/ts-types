{"version":3,"sources":["../../../src/interfaces/cache/lock.interface.ts"],"names":["ILock"],"mappings":";;;;;;;;;;;AAyDiB,IAAA;AAAA,CAAV,CAAUA,MAAV,KAAA;AAIE,EAAMA,MAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,OAAO,CAAA;AAAA,CAJpB,EAAA,KAAA,KAAA,KAAA,GAAA,EAAA,CAAA,CAAA","file":"lock.interface.mjs","sourcesContent":["/**\n * Interface for cache locks\n * Provides methods for distributed locking to coordinate access to shared resources\n */\nexport interface ILock {\n  /**\n   * Attempt to acquire the lock\n   * If the lock is acquired, the callback is executed and the lock is released afterward\n   * If the lock cannot be acquired, an error is thrown\n   *\n   * @param callback - The callback to execute if the lock is acquired\n   * @returns The result of the callback\n   * @template T - The type of value returned by the callback\n   * @throws Error if the lock cannot be acquired\n   */\n  get<T>(callback: () => Promise<T> | T): Promise<T>\n\n  /**\n   * Attempt to acquire the lock for the given number of seconds\n   * This method will retry acquiring the lock until the timeout is reached\n   *\n   * @param seconds - The maximum time to wait for the lock in seconds\n   * @param callback - The callback to execute if the lock is acquired\n   * @returns The result of the callback\n   * @template T - The type of value returned by the callback\n   * @throws Error if the lock cannot be acquired within the timeout\n   */\n  block<T>(seconds: number, callback: () => Promise<T> | T): Promise<T>\n\n  /**\n   * Release the lock\n   * This will only succeed if the current instance is the owner of the lock\n   *\n   * @returns True if the lock was released successfully\n   */\n  release(): Promise<boolean>\n\n  /**\n   * Returns the owner value written to the driver for this lock\n   * The owner is a unique identifier for the lock instance\n   *\n   * @returns The lock owner string\n   */\n  owner(): string\n\n  /**\n   * Releases this lock in disregard of ownership\n   * This is a forceful operation that should be used with caution\n   *\n   * @returns True if the lock was released successfully\n   */\n  forceRelease(): Promise<boolean>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILock {\n  /**\n   * Symbol for injecting the lock service\n   */\n  export const $ = Symbol.for(\"ILock\")\n}\n"]}