{"version":3,"sources":["../../../src/interfaces/cache/cache.interface.ts"],"names":["ICache"],"mappings":";;;;;;;;;;;AA+HiB,IAAA;AAAA,CAAV,CAAUA,OAAV,KAAA;AAIE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,CAJrB,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,CAAA,CAAA","file":"cache.interface.mjs","sourcesContent":["import type { ILock } from './lock.interface'\n\n/**\n * Interface for the main cache service\n * Provides methods for storing, retrieving, and managing cached data\n */\nexport interface ICache {\n  /**\n   * Get a value from the cache\n   * @param key - The cache key\n   * @param defaultValue - Default value or callback to return if key doesn't exist\n   * @returns The cached value, the default value, or undefined if not found\n   * @template T - The type of value to return\n   */\n  get<T>(key: string, defaultValue?: T): Promise<T | undefined>\n\n  /**\n   * Store a value in the cache\n   * @param key - The cache key\n   * @param value - The value to store\n   * @param ttl - Time to live in seconds (defaults to 60 if not specified)\n   * @returns True if the value was stored successfully\n   * @template T - The type of value being stored\n   */\n  put<T>(key: string, value: T, ttl?: number): Promise<boolean>\n\n  /**\n   * Store a value in the cache indefinitely\n   * @param key - The cache key\n   * @param value - The value to store\n   * @returns True if the value was stored successfully\n   * @template T - The type of value being stored\n   */\n  forever<T>(key: string, value: T): Promise<boolean>\n\n  /**\n   * Remove a value from the cache\n   * @param key - The cache key\n   * @returns True if the value was removed successfully\n   */\n  forget(key: string): Promise<boolean>\n\n  /**\n   * Remove all items from the cache\n   * @returns True if the cache was cleared successfully\n   */\n  flush(): Promise<boolean>\n\n  /**\n   * Get an item from the cache, or store the default value\n   * @param key - The cache key\n   * @param ttl - Time to live in seconds\n   * @param callback - Function that returns the default value\n   * @returns The cached value or the computed default value\n   * @template T - The type of value to return\n   */\n  remember<T>(key: string, ttl: number, callback: () => Promise<T> | T): Promise<T>\n\n  /**\n   * Get an item from the cache, or store the default value forever\n   * @param key - The cache key\n   * @param callback - Function that returns the default value\n   * @returns The cached value or the computed default value\n   * @template T - The type of value to return\n   */\n  rememberForever<T>(key: string, callback: () => Promise<T> | T): Promise<T>\n\n  /**\n   * Increment a value in the cache\n   * @param key - The cache key\n   * @param value - The value to increment by (defaults to 1)\n   * @returns The new value or false if the operation failed\n   */\n  increment(key: string, value?: number): Promise<number | boolean>\n\n  /**\n   * Decrement a value in the cache\n   * @param key - The cache key\n   * @param value - The value to decrement by (defaults to 1)\n   * @returns The new value or false if the operation failed\n   */\n  decrement(key: string, value?: number): Promise<number | boolean>\n\n  /**\n   * Get a lock instance\n   * @param name - The lock name\n   * @param seconds - The lock timeout in seconds (defaults to 60)\n   * @param owner - The lock owner (generated if not provided)\n   * @returns A lock instance\n   */\n  lock(name: string, seconds?: number, owner?: string): ILock\n\n  /**\n   * Get a lock instance without blocking\n   * @param name - The lock name\n   * @param owner - The lock owner\n   * @returns A lock instance\n   */\n  restoreLock(name: string, owner: string): ILock\n\n  /**\n   * Get multiple items from the cache\n   * @param keys - The cache keys\n   * @returns An object mapping keys to values\n   * @template T - The type of values to return\n   */\n  many<T>(keys: string[]): Promise<Record<string, T>>\n\n  /**\n   * Store multiple items in the cache\n   * @param values - The key-value pairs to store\n   * @param ttl - Time to live in seconds (defaults to 60)\n   * @returns True if the values were stored successfully\n   * @template T - The type of values being stored\n   */\n  putMany<T>(values: Record<string, T>, ttl?: number): Promise<boolean>\n\n  /**\n   * Get the cache key prefix\n   * @returns The cache key prefix\n   */\n  getPrefix(): string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICache {\n  /**\n   * Symbol for injecting the cache service\n   */\n  export const $ = Symbol.for('ICache')\n}\n"]}