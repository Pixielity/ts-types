{"version":3,"sources":["../../../src/interfaces/cache/repository.interface.ts"],"names":["IRepository"],"mappings":";;;;;;;;;;;AA8BiB,IAAA;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAA,WAAA,KAAA,WAAA,GAAA,EAAA,CAAA,CAAA","file":"repository.interface.mjs","sourcesContent":["import type { ICache } from \"./cache.interface\"\nimport type { ITaggedCache } from \"./tagged-cache.interface\"\n\n/**\n * Interface for the cache repository\n * Extends the ICache interface with tagging capabilities\n * The repository acts as a higher-level abstraction over the cache store\n */\nexport interface IRepository extends ICache {\n  /**\n   * Get a tagged cache instance\n   * Tagged caches allow grouping cache items and invalidating them together\n   *\n   * @param tags - The cache tags (single tag or array of tags)\n   * @returns A tagged cache instance\n   */\n  tags(tags: string | string[]): ITaggedCache\n\n  /**\n   * Get the underlying cache store\n   * Provides access to the store implementation for advanced operations\n   *\n   * @returns The cache store implementation\n   */\n  getStore(): any\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IRepository {\n  /**\n   * Symbol for injecting the repository service\n   */\n  export const $ = Symbol.for(\"IRepository\")\n}\n"]}