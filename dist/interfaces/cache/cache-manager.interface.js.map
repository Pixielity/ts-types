{"version":3,"sources":["../../../src/interfaces/cache/cache-manager.interface.ts"],"names":["ICacheManager"],"mappings":";;;;;;;;;;;;;AA4DiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"cache-manager.interface.js","sourcesContent":["import type { IStore } from \"./store.interface\"\nimport type { IRepository } from \"./repository.interface\"\n\n/**\n * Interface for the cache manager\n * The cache manager is responsible for creating and managing cache stores\n * It acts as a factory for cache repositories\n */\nexport interface ICacheManager {\n  /**\n   * Get the default cache store name\n   * @returns The name of the default cache store\n   */\n  getDefaultInstance(): string\n\n  /**\n   * Set the default cache store name\n   * @param name - The store name to set as default\n   */\n  setDefaultInstance(name: string): void\n\n  /**\n   * Get the cache store configuration\n   * @param name - The store name\n   * @returns The store configuration object, or null if not found\n   */\n  getInstanceConfig(name: string): Record<string, any> | null\n\n  /**\n   * Create a new cache repository with the given implementation\n   * @param store - The cache store implementation\n   * @returns A repository instance wrapping the store\n   */\n  repository(store: IStore): IRepository\n\n  /**\n   * Get a cache store instance\n   * @param name - The store name (optional, uses default if not provided)\n   * @returns A repository instance for the requested store\n   */\n  store(name?: string): IRepository\n\n  /**\n   * Get the default cache driver name\n   * This is an alias for getDefaultInstance for compatibility with Laravel-style managers\n   * @returns The name of the default cache store\n   */\n  getDefaultDriver(): string\n\n  /**\n   * Set the default cache driver name\n   * This is an alias for setDefaultInstance for compatibility with Laravel-style managers\n   * @param name - The driver name to set as default\n   */\n  setDefaultDriver(name: string): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICacheManager {\n  /**\n   * Symbol for injecting the cache manager service\n   */\n  export const $ = Symbol.for(\"ICacheManager\")\n}\n"]}