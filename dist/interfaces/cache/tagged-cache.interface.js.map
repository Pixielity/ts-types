{"version":3,"sources":["../../../src/interfaces/cache/tagged-cache.interface.ts"],"names":["ITaggedCache"],"mappings":";;;;;;;;;;;;;AA4BiBA;AAAA,CAAV,CAAUA,aAAV,KAAA;AAIE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAJ3B,EAAAA,oBAAA,KAAAA,oBAAA,GAAA,EAAA,CAAA,CAAA","file":"tagged-cache.interface.js","sourcesContent":["import type { ICache } from './cache.interface'\n\n/**\n * Interface for tagged cache\n * Tagged caches allow grouping cache items and invalidating them together\n * This is useful for cache invalidation strategies where multiple related\n * cache entries need to be invalidated at once\n */\nexport interface ITaggedCache extends ICache {\n  /**\n   * Get the tag names\n   * Returns the array of tags associated with this cache instance\n   *\n   * @returns The array of tag names\n   */\n  getTags(): string[]\n\n  /**\n   * Reset all tags\n   * This generates new tag IDs for all tags, effectively invalidating\n   * all cache entries associated with these tags\n   */\n  resetTags(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ITaggedCache {\n  /**\n   * Symbol for injecting the tagged cache service\n   */\n  export const $ = Symbol.for('ITaggedCache')\n}\n"]}