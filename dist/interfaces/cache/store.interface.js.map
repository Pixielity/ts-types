{"version":3,"sources":["../../../src/interfaces/cache/store.interface.ts"],"names":["IStore"],"mappings":";;;;;;;;;;;;;AAgGiBA;AAAA,CAAV,CAAUA,OAAV,KAAA;AAIE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAK7B,EAAMA,OAAA,CAAA,UAAA,GAAa,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAK1C,EAAMA,OAAA,CAAA,SAAA,GAAY,MAAO,CAAA,GAAA,CAAI,WAAW,CAAA;AAKxC,EAAMA,OAAA,CAAA,cAAA,GAAiB,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAKlD,EAAMA,OAAA,CAAA,UAAA,GAAa,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAK1C,EAAMA,OAAA,CAAA,aAAA,GAAgB,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAKhD,EAAMA,OAAA,CAAA,aAAA,GAAgB,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAKhD,EAAMA,OAAA,CAAA,SAAA,GAAY,MAAO,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA,CAvChC,EAAAA,cAAA,KAAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"store.interface.js","sourcesContent":["/**\n * Interface for cache store implementations\n * Defines the contract that all cache storage drivers must implement\n */\nimport type { ILockProvider } from \"./lock-provider.interface\"\n\nexport interface IStore {\n  /**\n   * Retrieve an item from the cache by key\n   * @param key - The cache key\n   * @returns The cached value or undefined if not found\n   * @template T - The type of value to return\n   */\n  get<T>(key: string): Promise<T | undefined>\n\n  /**\n   * Store an item in the cache for a given number of seconds\n   * @param key - The cache key\n   * @param value - The value to store\n   * @param seconds - The time to live in seconds (defaults to 60)\n   * @returns True if the value was stored successfully\n   * @template T - The type of value being stored\n   */\n  put<T>(key: string, value: T, seconds?: number): Promise<boolean>\n\n  /**\n   * Store an item in the cache indefinitely\n   * @param key - The cache key\n   * @param value - The value to store\n   * @returns True if the value was stored successfully\n   * @template T - The type of value being stored\n   */\n  forever<T>(key: string, value: T): Promise<boolean>\n\n  /**\n   * Remove an item from the cache\n   * @param key - The cache key\n   * @returns True if the value was removed successfully\n   */\n  forget(key: string): Promise<boolean>\n\n  /**\n   * Remove all items from the cache\n   * @returns True if the cache was cleared successfully\n   */\n  flush(): Promise<boolean>\n\n  /**\n   * Get the cache key prefix\n   * @returns The cache key prefix\n   */\n  getPrefix(): string\n\n  /**\n   * Get multiple items from the cache\n   * @param keys - The cache keys\n   * @returns An object mapping keys to values\n   * @template T - The type of values to return\n   */\n  many<T>(keys: string[]): Promise<Record<string, T>>\n\n  /**\n   * Store multiple items in the cache\n   * @param values - The key-value pairs to store\n   * @param seconds - The time to live in seconds (defaults to 60)\n   * @returns True if the values were stored successfully\n   * @template T - The type of values being stored\n   */\n  putMany<T>(values: Record<string, T>, seconds?: number): Promise<boolean>\n\n  /**\n   * Increment the value of an item in the cache\n   * @param key - The cache key\n   * @param value - The value to increment by (defaults to 1)\n   * @returns The new value or false if the operation failed\n   */\n  increment(key: string, value?: number): Promise<number | boolean>\n\n  /**\n   * Decrement the value of an item in the cache\n   * @param key - The cache key\n   * @param value - The value to decrement by (defaults to 1)\n   * @returns The new value or false if the operation failed\n   */\n  decrement(key: string, value?: number): Promise<number | boolean>\n\n  /**\n   * Get the lock provider\n   * @returns The lock provider instance\n   */\n  getLockProvider(): ILockProvider\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IStore {\n  /**\n   * Symbol for injecting the store service\n   */\n  export const $ = Symbol.for(\"IStore\")\n\n  /**\n   * Symbol for injecting the array store\n   */\n  export const ArrayStore = Symbol.for(\"ArrayStore\")\n\n  /**\n   * Symbol for injecting the file store\n   */\n  export const FileStore = Symbol.for(\"FileStore\")\n\n  /**\n   * Symbol for injecting the memcached store\n   */\n  export const MemcachedStore = Symbol.for(\"MemcachedStore\")\n\n  /**\n   * Symbol for injecting the redis store\n   */\n  export const RedisStore = Symbol.for(\"RedisStore\")\n\n  /**\n   * Symbol for injecting the dynamodb store\n   */\n  export const DynamoDbStore = Symbol.for(\"DynamoDbStore\")\n\n  /**\n   * Symbol for injecting the database store\n   */\n  export const DatabaseStore = Symbol.for(\"DatabaseStore\")\n\n  /**\n   * Symbol for injecting the null store\n   */\n  export const NullStore = Symbol.for(\"NullStore\")\n}\n"]}