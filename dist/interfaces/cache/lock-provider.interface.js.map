{"version":3,"sources":["../../../src/interfaces/cache/lock-provider.interface.ts"],"names":["ILockProvider"],"mappings":";;;;;;;;;;;;;AAiCiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"lock-provider.interface.js","sourcesContent":["import type { ILock } from './lock.interface'\n\n/**\n * Interface for lock providers\n * Lock providers are responsible for creating lock instances\n * Each cache store has its own lock provider implementation\n */\nexport interface ILockProvider {\n  /**\n   * Get a lock instance\n   * Creates a new lock with the specified name, timeout, and owner\n   *\n   * @param name - The lock name (unique identifier for the resource being locked)\n   * @param seconds - The lock timeout in seconds (defaults to 60)\n   * @param owner - The lock owner (generated if not provided)\n   * @returns A lock instance\n   */\n  lock(name: string, seconds?: number, owner?: string): ILock\n\n  /**\n   * Restore a lock instance\n   * Creates a lock instance with a specific owner, used to manage an existing lock\n   *\n   * @param name - The lock name\n   * @param owner - The lock owner\n   * @returns A lock instance\n   */\n  restoreLock(name: string, owner: string): ILock\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILockProvider {\n  /**\n   * Symbol for injecting the lock provider service\n   */\n  export const $ = Symbol.for('ILockProvider')\n}\n"]}