{"version":3,"sources":["../../../src/interfaces/react/cache-value-result.interface.ts"],"names":["ICacheValueResult"],"mappings":";;;;;;;;;;;AAgDiB,IAAA;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAA,iBAAA,KAAA,iBAAA,GAAA,EAAA,CAAA,CAAA","file":"cache-value-result.interface.mjs","sourcesContent":["/**\n * Result of the useCacheValue hook\n * Provides access to and control over a cached value\n */\nexport interface ICacheValueResult<T> {\n  /**\n   * The cached value\n   * Null if the value doesn't exist, undefined if it's still loading\n   */\n  value: T | null | undefined\n\n  /**\n   * Function to set the value in the cache\n   *\n   * @param newValue - The new value to cache\n   * @param ttl - Optional time-to-live in seconds\n   * @returns A promise resolving to whether the operation succeeded\n   */\n  setValue: (newValue: T, ttl?: number) => Promise<boolean>\n\n  /**\n   * Function to remove the value from the cache\n   *\n   * @returns A promise resolving to whether the operation succeeded\n   */\n  removeValue: () => Promise<boolean>\n\n  /**\n   * Whether the value is currently loading\n   */\n  loading: boolean\n\n  /**\n   * Function to refresh the value from the cache\n   *\n   * @returns A promise that resolves when the refresh is complete\n   */\n  refresh: () => Promise<void>\n\n  /**\n   * Any error that occurred during loading or operations\n   */\n  error: Error | null\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICacheValueResult {\n  /**\n   * Symbol for injecting the cache value result service\n   */\n  export const $ = Symbol.for(\"ICacheValueResult\")\n}\n"]}