{"version":3,"sources":["../../../src/interfaces/react/app-provider-props.interface.ts","../../../src/interfaces/react/container-provider-props.interface.ts","../../../src/interfaces/react/cached-data-result.interface.ts","../../../src/interfaces/react/cache-value-result.interface.ts"],"names":["IAppProviderProps","IContainerProviderProps","ICachedDataResult","ICacheValueResult"],"mappings":";;;;;;;;;;;;;AA4BiBA;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAAA,yBAAA,KAAAA,yBAAA,GAAA,EAAA,CAAA,CAAA;;;ACAAC;AAAA,CAAV,CAAUA,wBAAV,KAAA;AAIE,EAAMA,wBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,yBAAyB,CAAA;AAAA,CAJtC,EAAAA,+BAAA,KAAAA,+BAAA,GAAA,EAAA,CAAA,CAAA;;;ACkBAC;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAAA,yBAAA,KAAAA,yBAAA,GAAA,EAAA,CAAA,CAAA;;;ACEAC;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAAA,yBAAA,KAAAA,yBAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { ReactNode } from 'react'\nimport type { IApplication } from '../application'\n\n/**\n * Props for the AppProvider component\n * Provides the application instance to the React component tree\n */\nexport interface IAppProviderProps {\n  /**\n   * The Application instance to provide\n   */\n  app: IApplication\n\n  /**\n   * The children components\n   */\n  children: ReactNode\n\n  /**\n   * Whether to create a new container scope\n   * @default false\n   */\n  createScope?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IAppProviderProps {\n  /**\n   * Symbol for injecting the app provider props service\n   */\n  export const $ = Symbol.for('IAppProviderProps')\n}\n","import type { ReactNode } from 'react'\nimport type { IContainer } from '../container'\n\n/**\n * Props for the ContainerProvider component\n * Provides the container instance to the React component tree\n */\nexport interface IContainerProviderProps {\n  /**\n   * The Container instance to provide\n   */\n  container: IContainer\n\n  /**\n   * The children components\n   */\n  children: ReactNode\n\n  /**\n   * Whether to create a new container scope\n   * @default false\n   */\n  createScope?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IContainerProviderProps {\n  /**\n   * Symbol for injecting the container provider props service\n   */\n  export const $ = Symbol.for('IContainerProviderProps')\n}\n","/**\n * Result of the useCachedData hook\n * Provides access to data that is cached with automatic fetching\n */\nexport interface ICachedDataResult<T> {\n  /**\n   * The cached data\n   * Null if not loaded yet or if an error occurred\n   */\n  data: T | null\n\n  /**\n   * Whether the data is currently loading\n   */\n  loading: boolean\n\n  /**\n   * Any error that occurred during loading\n   */\n  error: Error | null\n\n  /**\n   * Function to refresh the data\n   * Fetches fresh data from the source and updates the cache\n   *\n   * @returns A promise that resolves when the refresh is complete\n   */\n  refresh: () => Promise<void>\n\n  /**\n   * Function to invalidate the cache\n   * Marks the current data as invalid, triggering a refresh on next access\n   *\n   * @returns A promise that resolves when the invalidation is complete\n   */\n  invalidate: () => Promise<void>\n\n  /**\n   * The timestamp when the data was last updated\n   */\n  lastUpdated: Date | null\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICachedDataResult {\n  /**\n   * Symbol for injecting the cached data result service\n   */\n  export const $ = Symbol.for('ICachedDataResult')\n}\n","/**\n * Result of the useCacheValue hook\n * Provides access to and control over a cached value\n */\nexport interface ICacheValueResult<T> {\n  /**\n   * The cached value\n   * Null if the value doesn't exist, undefined if it's still loading\n   */\n  value: T | null | undefined\n\n  /**\n   * Function to set the value in the cache\n   *\n   * @param newValue - The new value to cache\n   * @param ttl - Optional time-to-live in seconds\n   * @returns A promise resolving to whether the operation succeeded\n   */\n  setValue: (newValue: T, ttl?: number) => Promise<boolean>\n\n  /**\n   * Function to remove the value from the cache\n   *\n   * @returns A promise resolving to whether the operation succeeded\n   */\n  removeValue: () => Promise<boolean>\n\n  /**\n   * Whether the value is currently loading\n   */\n  loading: boolean\n\n  /**\n   * Function to refresh the value from the cache\n   *\n   * @returns A promise that resolves when the refresh is complete\n   */\n  refresh: () => Promise<void>\n\n  /**\n   * Any error that occurred during loading or operations\n   */\n  error: Error | null\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICacheValueResult {\n  /**\n   * Symbol for injecting the cache value result service\n   */\n  export const $ = Symbol.for('ICacheValueResult')\n}\n"]}