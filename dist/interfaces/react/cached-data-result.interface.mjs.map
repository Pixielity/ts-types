{"version":3,"sources":["../../../src/interfaces/react/cached-data-result.interface.ts"],"names":["ICachedDataResult"],"mappings":";;;;;;;;;;;AA8CiB,IAAA;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAIE,EAAMA,kBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,mBAAmB,CAAA;AAAA,CAJhC,EAAA,iBAAA,KAAA,iBAAA,GAAA,EAAA,CAAA,CAAA","file":"cached-data-result.interface.mjs","sourcesContent":["/**\n * Result of the useCachedData hook\n * Provides access to data that is cached with automatic fetching\n */\nexport interface ICachedDataResult<T> {\n  /**\n   * The cached data\n   * Null if not loaded yet or if an error occurred\n   */\n  data: T | null\n\n  /**\n   * Whether the data is currently loading\n   */\n  loading: boolean\n\n  /**\n   * Any error that occurred during loading\n   */\n  error: Error | null\n\n  /**\n   * Function to refresh the data\n   * Fetches fresh data from the source and updates the cache\n   *\n   * @returns A promise that resolves when the refresh is complete\n   */\n  refresh: () => Promise<void>\n\n  /**\n   * Function to invalidate the cache\n   * Marks the current data as invalid, triggering a refresh on next access\n   *\n   * @returns A promise that resolves when the invalidation is complete\n   */\n  invalidate: () => Promise<void>\n\n  /**\n   * The timestamp when the data was last updated\n   */\n  lastUpdated: Date | null\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICachedDataResult {\n  /**\n   * Symbol for injecting the cached data result service\n   */\n  export const $ = Symbol.for('ICachedDataResult')\n}\n"]}