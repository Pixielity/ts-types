{"version":3,"sources":["../../../src/interfaces/redis/factory.interface.ts","../../../src/interfaces/redis/connector.interface.ts","../../../src/interfaces/redis/connection.interface.ts","../../../src/interfaces/redis/redis.interface.ts"],"names":["IRedisFactory","IRedisConnector","IRedisConnection","IRedis"],"mappings":";;;;;;;;;;;;;AAwEiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AACE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAD5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA;;;AChBAC;AAAA,CAAV,CAAUA,gBAAV,KAAA;AACE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAD9B,EAAAA,uBAAA,KAAAA,uBAAA,GAAA,EAAA,CAAA,CAAA;;;AC4RAC;AAAA,CAAV,CAAUA,iBAAV,KAAA;AACE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAD/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA;;;ACpVAC;AAAA,CAAV,CAAUA,OAAV,KAAA;AACE,EAAMA,OAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,QAAQ,CAAA;AAAA,CADrB,EAAAA,cAAA,KAAAA,cAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { IRedisConnection } from \"./connection.interface\"\n\n/**\n * Redis factory interface\n * Responsible for creating and managing Redis connections\n */\nexport interface IRedisFactory {\n  /**\n   * Get a Redis connection by name\n   * @param name - The connection name (optional, uses default if not provided)\n   * @returns A Redis connection instance\n   *\n   * @example\n   * ```typescript\n   * // Get the default connection\n   * const redis = factory.connection();\n   *\n   * // Get a specific named connection\n   * const cache = factory.connection('cache');\n   * ```\n   */\n  connection(name?: string): IRedisConnection\n\n  /**\n   * Create a new Redis connection\n   * @param config - The connection configuration\n   * @returns A Redis connection instance\n   */\n  make(config: Record<string, any>): IRedisConnection\n\n  /**\n   * Get the default connection name\n   * @returns The default connection name\n   */\n  getDefaultConnection(): string\n\n  /**\n   * Set the default connection name\n   * @param name - The default connection name\n   */\n  setDefaultConnection(name: string): void\n\n  /**\n   * Get all registered connections\n   * @returns A record of connection names to connection instances\n   */\n  getConnections(): Record<string, IRedisConnection>\n\n  /**\n   * Check if a connection exists\n   * @param name - The connection name\n   * @returns True if the connection exists\n   */\n  hasConnection(name: string): boolean\n\n  /**\n   * Add a connection to the factory\n   * @param name - The connection name\n   * @param connection - The connection instance\n   */\n  addConnection(name: string, connection: IRedisConnection): void\n\n  /**\n   * Remove a connection from the factory\n   * @param name - The connection name\n   */\n  removeConnection(name: string): void\n}\n\n/**\n * DI token for IRedisFactory interface\n */\nexport namespace IRedisFactory {\n  export const $ = Symbol.for(\"IRedisFactory\")\n}\n","import type { IRedisConnection } from \"./connection.interface\"\n\n/**\n * Redis connector interface\n * Responsible for establishing connections to Redis servers and clusters\n */\nexport interface IRedisConnector {\n  /**\n   * Create a connection to a Redis instance\n   * @param config - The connection configuration\n   * @param options - Additional connection options\n   * @returns A Redis connection instance\n   *\n   * @example\n   * ```typescript\n   * const connection = connector.connect({\n   *   host: 'localhost',\n   *   port: 6379,\n   *   password: 'secret'\n   * }, {\n   *   retryStrategy: (times) => Math.min(times * 50, 2000)\n   * });\n   * ```\n   */\n  connect(config: Record<string, any>, options: Record<string, any>): IRedisConnection\n\n  /**\n   * Create a connection to a Redis cluster\n   * @param config - The cluster nodes configuration\n   * @param clusterOptions - Cluster-specific options\n   * @param options - Additional connection options\n   * @returns A Redis connection instance\n   *\n   * @example\n   * ```typescript\n   * const clusterConnection = connector.connectToCluster([\n   *   { host: 'redis-1', port: 6379 },\n   *   { host: 'redis-2', port: 6379 },\n   *   { host: 'redis-3', port: 6379 }\n   * ], {\n   *   scaleReads: 'all'\n   * }, {\n   *   maxRedirections: 16\n   * });\n   * ```\n   */\n  connectToCluster(\n    config: Record<string, any>[],\n    clusterOptions: Record<string, any>,\n    options: Record<string, any>,\n  ): IRedisConnection\n}\n\n/**\n * DI token for IRedisConnector interface\n */\nexport namespace IRedisConnector {\n  export const $ = Symbol.for(\"IRedisConnector\")\n}\n","/**\n * Redis connection interface\n * Defines methods for interacting with Redis, including pub/sub functionality\n */\nexport interface IRedisConnection {\n  /**\n   * Subscribe to one or more channels for messages\n   * @param channels - The channel(s) to subscribe to\n   * @param callback - The callback function to execute when a message is received\n   * @returns Promise that resolves when the subscription is active\n   *\n   * @example\n   * ```typescript\n   * await redis.subscribe(['notifications', 'events'], (message, channel) => {\n   *   console.log(`Received message on ${channel}: ${message}`);\n   * });\n   * ```\n   */\n  subscribe(channels: string | string[], callback: (message: string, channel: string) => void): Promise<void>\n\n  /**\n   * Subscribe to one or more channels with wildcards\n   * @param patterns - The pattern(s) to subscribe to\n   * @param callback - The callback function to execute when a message is received\n   * @returns Promise that resolves when the subscription is active\n   *\n   * @example\n   * ```typescript\n   * await redis.psubscribe(['user:*:notifications', 'system:*'], (message, channel, pattern) => {\n   *   console.log(`Received message on ${channel} matching ${pattern}: ${message}`);\n   * });\n   * ```\n   */\n  psubscribe(\n    patterns: string | string[],\n    callback: (message: string, channel: string, pattern: string) => void,\n  ): Promise<void>\n\n  /**\n   * Run a command against the Redis database\n   * @param method - The Redis command to execute\n   * @param parameters - The parameters for the command\n   * @returns The result of the command\n   *\n   * @example\n   * ```typescript\n   * // Execute a SET command\n   * const result = await redis.command('set', ['user:1:name', 'John Doe']);\n   *\n   * // Execute a HGETALL command\n   * const userData = await redis.command('hgetall', ['user:1']);\n   * ```\n   */\n  command(method: string, parameters?: any[]): Promise<any>\n\n  /**\n   * Get the Redis client instance\n   */\n  getClient(): any\n\n  /**\n   * Get the key prefix\n   */\n  getPrefix(): string\n\n  /**\n   * Set the key prefix\n   * @param prefix - The key prefix\n   */\n  setPrefix(prefix: string): void\n\n  /**\n   * Get a value from Redis\n   * @param key - The key\n   */\n  get(key: string): Promise<any>\n\n  /**\n   * Set a value in Redis\n   * @param key - The key\n   * @param value - The value\n   * @param ttl - The time to live in seconds\n   */\n  set(key: string, value: any, ttl?: number): Promise<any>\n\n  /**\n   * Set a value in Redis if it doesn't exist\n   * @param key - The key\n   * @param value - The value\n   * @param ttl - The time to live in seconds\n   */\n  setnx(key: string, value: any, ttl?: number): Promise<any>\n\n  /**\n   * Set a value in Redis with an expiration\n   * @param key - The key\n   * @param ttl - The time to live in seconds\n   * @param value - The value\n   */\n  setex(key: string, ttl: number, value: any): Promise<any>\n\n  /**\n   * Get multiple values from Redis\n   * @param keys - The keys\n   */\n  mget(...keys: string[]): Promise<any[]>\n\n  /**\n   * Set multiple values in Redis\n   * @param values - The key-value pairs\n   */\n  mset(values: Record<string, any>): Promise<any>\n\n  /**\n   * Delete a key from Redis\n   * @param key - The key\n   */\n  del(key: string): Promise<number>\n\n  /**\n   * Delete multiple keys from Redis\n   * @param keys - The keys\n   */\n  unlink(...keys: string[]): Promise<number>\n\n  /**\n   * Check if a key exists in Redis\n   * @param key - The key\n   */\n  exists(key: string): Promise<number>\n\n  /**\n   * Increment a value in Redis\n   * @param key - The key\n   */\n  incr(key: string): Promise<number>\n\n  /**\n   * Increment a value in Redis by a specific amount\n   * @param key - The key\n   * @param value - The value to increment by\n   */\n  incrby(key: string, value: number): Promise<number>\n\n  /**\n   * Decrement a value in Redis\n   * @param key - The key\n   */\n  decr(key: string): Promise<number>\n\n  /**\n   * Decrement a value in Redis by a specific amount\n   * @param key - The key\n   * @param value - The value to decrement by\n   */\n  decrby(key: string, value: number): Promise<number>\n\n  /**\n   * Set a key's time to live in seconds\n   * @param key - The key\n   * @param ttl - The time to live in seconds\n   */\n  expire(key: string, ttl: number): Promise<number>\n\n  /**\n   * Get the time to live for a key in seconds\n   * @param key - The key\n   */\n  ttl(key: string): Promise<number>\n\n  /**\n   * Execute a Lua script\n   * @param script - The Lua script\n   * @param keys - The keys\n   * @param args - The arguments\n   */\n  eval(script: string, keys: string[], args: any[]): Promise<any>\n\n  /**\n   * Execute a stored Lua script\n   * @param sha - The script SHA\n   * @param keys - The keys\n   * @param args - The arguments\n   */\n  evalsha(sha: string, keys: string[], args: any[]): Promise<any>\n\n  /**\n   * Add a member to a set\n   * @param key - The key\n   * @param members - The members\n   */\n  sadd(key: string, ...members: any[]): Promise<number>\n\n  /**\n   * Remove a member from a set\n   * @param key - The key\n   * @param members - The members\n   */\n  srem(key: string, ...members: any[]): Promise<number>\n\n  /**\n   * Get all members in a set\n   * @param key - The key\n   */\n  smembers(key: string): Promise<string[]>\n\n  /**\n   * Check if a value is a member of a set\n   * @param key - The key\n   * @param member - The member\n   */\n  sismember(key: string, member: any): Promise<number>\n\n  /**\n   * Add a member to a sorted set\n   * @param key - The key\n   * @param score - The score\n   * @param member - The member\n   */\n  zadd(key: string, score: number, member: any): Promise<number>\n\n  /**\n   * Remove a member from a sorted set\n   * @param key - The key\n   * @param member - The member\n   */\n  zrem(key: string, member: any): Promise<number>\n\n  /**\n   * Get a range of members in a sorted set\n   * @param key - The key\n   * @param start - The start index\n   * @param stop - The stop index\n   */\n  zrange(key: string, start: number, stop: number): Promise<string[]>\n\n  /**\n   * Add a value to a list\n   * @param key - The key\n   * @param values - The values\n   */\n  lpush(key: string, ...values: any[]): Promise<number>\n\n  /**\n   * Remove and get the first element in a list\n   * @param key - The key\n   */\n  lpop(key: string): Promise<string | null>\n\n  /**\n   * Add a value to a list\n   * @param key - The key\n   * @param values - The values\n   */\n  rpush(key: string, ...values: any[]): Promise<number>\n\n  /**\n   * Remove and get the last element in a list\n   * @param key - The key\n   */\n  rpop(key: string): Promise<string | null>\n\n  /**\n   * Get a range of elements from a list\n   * @param key - The key\n   * @param start - The start index\n   * @param stop - The stop index\n   */\n  lrange(key: string, start: number, stop: number): Promise<string[]>\n\n  /**\n   * Set the value of a hash field\n   * @param key - The key\n   * @param field - The field\n   * @param value - The value\n   */\n  hset(key: string, field: string, value: any): Promise<number>\n\n  /**\n   * Get the value of a hash field\n   * @param key - The key\n   * @param field - The field\n   */\n  hget(key: string, field: string): Promise<string | null>\n\n  /**\n   * Delete a hash field\n   * @param key - The key\n   * @param fields - The fields\n   */\n  hdel(key: string, ...fields: string[]): Promise<number>\n\n  /**\n   * Get all fields and values in a hash\n   * @param key - The key\n   */\n  hgetall(key: string): Promise<Record<string, string>>\n\n  /**\n   * Set multiple hash fields to multiple values\n   * @param key - The key\n   * @param values - The field-value pairs\n   */\n  hmset(key: string, values: Record<string, any>): Promise<any>\n\n  /**\n   * Get the values of all the given hash fields\n   * @param key - The key\n   * @param fields - The fields\n   */\n  hmget(key: string, ...fields: string[]): Promise<(string | null)[]>\n\n  /**\n   * Execute a pipeline of commands\n   * @param callback - The callback function\n   */\n  pipeline(callback: (pipeline: any) => void): Promise<any[]>\n\n  /**\n   * Execute a transaction\n   * @param callback - The callback function\n   */\n  transaction(callback: (transaction: any) => void): Promise<any[]>\n\n  /**\n   * Publish a message to a channel\n   * @param channel - The channel\n   * @param message - The message\n   */\n  publish(channel: string, message: string): Promise<number>\n\n  /**\n   * Close the Redis connection\n   */\n  disconnect(): Promise<void>\n}\n\n/**\n * DI token for IRedisConnection interface\n */\nexport namespace IRedisConnection {\n  export const $ = Symbol.for(\"IRedisConnection\")\n}\n","export namespace IRedis {\n  export const $ = Symbol.for(\"IRedis\")\n}\n"]}