{"version":3,"sources":["../../../src/interfaces/redis/connector.interface.ts"],"names":["IRedisConnector"],"mappings":";;;;;;;;;;;AAwDiB,IAAA;AAAA,CAAV,CAAUA,gBAAV,KAAA;AACE,EAAMA,gBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,CAD9B,EAAA,eAAA,KAAA,eAAA,GAAA,EAAA,CAAA,CAAA","file":"connector.interface.mjs","sourcesContent":["import type { IRedisConnection } from \"./connection.interface\"\n\n/**\n * Redis connector interface\n * Responsible for establishing connections to Redis servers and clusters\n */\nexport interface IRedisConnector {\n  /**\n   * Create a connection to a Redis instance\n   * @param config - The connection configuration\n   * @param options - Additional connection options\n   * @returns A Redis connection instance\n   *\n   * @example\n   * ```typescript\n   * const connection = connector.connect({\n   *   host: 'localhost',\n   *   port: 6379,\n   *   password: 'secret'\n   * }, {\n   *   retryStrategy: (times) => Math.min(times * 50, 2000)\n   * });\n   * ```\n   */\n  connect(config: Record<string, any>, options: Record<string, any>): IRedisConnection\n\n  /**\n   * Create a connection to a Redis cluster\n   * @param config - The cluster nodes configuration\n   * @param clusterOptions - Cluster-specific options\n   * @param options - Additional connection options\n   * @returns A Redis connection instance\n   *\n   * @example\n   * ```typescript\n   * const clusterConnection = connector.connectToCluster([\n   *   { host: 'redis-1', port: 6379 },\n   *   { host: 'redis-2', port: 6379 },\n   *   { host: 'redis-3', port: 6379 }\n   * ], {\n   *   scaleReads: 'all'\n   * }, {\n   *   maxRedirections: 16\n   * });\n   * ```\n   */\n  connectToCluster(\n    config: Record<string, any>[],\n    clusterOptions: Record<string, any>,\n    options: Record<string, any>,\n  ): IRedisConnection\n}\n\n/**\n * DI token for IRedisConnector interface\n */\nexport namespace IRedisConnector {\n  export const $ = Symbol.for(\"IRedisConnector\")\n}\n"]}