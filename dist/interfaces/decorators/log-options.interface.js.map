{"version":3,"sources":["../../../src/interfaces/decorators/log-options.interface.ts"],"names":["ILogOptions"],"mappings":";;;;;;;;;;;;;AAmDiBA;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAAA,mBAAA,KAAAA,mBAAA,GAAA,EAAA,CAAA,CAAA","file":"log-options.interface.js","sourcesContent":["/**\n * Log decorator options\n * Controls how method calls are logged\n */\nexport interface ILogOptions {\n  /**\n   * The log level\n   * @default \"info\"\n   */\n  level?: \"debug\" | \"info\" | \"warn\" | \"error\"\n\n  /**\n   * Whether to log method arguments\n   * @default true\n   */\n  logArgs?: boolean\n\n  /**\n   * Whether to log method return values\n   * @default true\n   */\n  logReturn?: boolean\n\n  /**\n   * Whether to log execution time\n   * @default true\n   */\n  logTime?: boolean\n\n  /**\n   * Custom logger to use\n   * If not provided, console is used\n   */\n  logger?: any\n\n  /**\n   * Whether to log errors\n   * @default true\n   */\n  logErrors?: boolean\n\n  /**\n   * Custom message format\n   * Available placeholders: {className}, {methodName}, {args}, {result}, {time}\n   */\n  format?: string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogOptions {\n  /**\n   * Symbol for injecting the log options service\n   */\n  export const $ = Symbol.for(\"ILogOptions\")\n}\n"]}