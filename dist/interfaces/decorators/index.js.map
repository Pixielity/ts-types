{"version":3,"sources":["../../../src/interfaces/decorators/class-decorator-options.interface.ts","../../../src/interfaces/decorators/log-options.interface.ts","../../../src/interfaces/decorators/validation-function.interface.ts"],"names":["IClassDecoratorOptions","ILogOptions","IValidationFunction"],"mappings":";;;;;;;;;;;;;AAyDiBA;AAAA,CAAV,CAAUA,uBAAV,KAAA;AAIE,EAAMA,uBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,wBAAwB,CAAA;AAAA,CAJrC,EAAAA,8BAAA,KAAAA,8BAAA,GAAA,EAAA,CAAA,CAAA;;;ACNAC;AAAA,CAAV,CAAUA,YAAV,KAAA;AAIE,EAAMA,YAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,aAAa,CAAA;AAAA,CAJ1B,EAAAA,mBAAA,KAAAA,mBAAA,GAAA,EAAA,CAAA,CAAA;;;AC/BAC;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["/**\n * Options for creating a class decorator\n * Controls how the decorator modifies the target class\n */\nexport interface IClassDecoratorOptions {\n  /**\n   * Whether to copy prototype properties\n   * @default true\n   */\n  copyPrototype?: boolean\n\n  /**\n   * Whether to copy static properties\n   * @default true\n   */\n  copyStatic?: boolean\n\n  /**\n   * Whether to copy metadata\n   * @default true\n   */\n  copyMetadata?: boolean\n\n  /**\n   * A function to run before the constructor is called\n   * Can be used to prepare the environment or validate arguments\n   */\n  beforeConstructor?: (target: any, args: any[]) => void\n\n  /**\n   * A function to run after the constructor is called\n   * Can be used to modify the created instance\n   */\n  afterConstructor?: (instance: any, target: any, args: any[]) => void\n\n  /**\n   * A function to transform the instance after creation\n   * Can return a completely different object\n   */\n  transformInstance?: (instance: any, target: any, args: any[]) => any\n\n  /**\n   * Whether to inherit parent class decorators\n   * @default true\n   */\n  inheritDecorators?: boolean\n\n  /**\n   * Whether to seal the resulting class\n   * @default false\n   */\n  seal?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IClassDecoratorOptions {\n  /**\n   * Symbol for injecting the class decorator options service\n   */\n  export const $ = Symbol.for('IClassDecoratorOptions')\n}\n","/**\n * Log decorator options\n * Controls how method calls are logged\n */\nexport interface ILogOptions {\n  /**\n   * The log level\n   * @default \"info\"\n   */\n  level?: 'debug' | 'info' | 'warn' | 'error'\n\n  /**\n   * Whether to log method arguments\n   * @default true\n   */\n  logArgs?: boolean\n\n  /**\n   * Whether to log method return values\n   * @default true\n   */\n  logReturn?: boolean\n\n  /**\n   * Whether to log execution time\n   * @default true\n   */\n  logTime?: boolean\n\n  /**\n   * Custom logger to use\n   * If not provided, console is used\n   */\n  logger?: any\n\n  /**\n   * Whether to log errors\n   * @default true\n   */\n  logErrors?: boolean\n\n  /**\n   * Custom message format\n   * Available placeholders: {className}, {methodName}, {args}, {result}, {time}\n   */\n  format?: string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ILogOptions {\n  /**\n   * Symbol for injecting the log options service\n   */\n  export const $ = Symbol.for('ILogOptions')\n}\n","import type { ValidationArguments } from 'class-validator'\n\n/**\n * Interface for validation function\n * Used for custom validation rules\n */\nexport interface IValidationFunction {\n  /**\n   * Validate a value\n   *\n   * @param value - The value to validate\n   * @param args - The validation arguments\n   * @returns Whether the value is valid or a promise that resolves to whether the value is valid\n   */\n  (value: any, args: ValidationArguments): boolean | Promise<boolean>\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IValidationFunction {\n  /**\n   * Symbol for injecting the validation function service\n   */\n  export const $ = Symbol.for('IValidationFunction')\n}\n"]}