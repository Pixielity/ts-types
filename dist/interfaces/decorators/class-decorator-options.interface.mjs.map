{"version":3,"sources":["../../../src/interfaces/decorators/class-decorator-options.interface.ts"],"names":["IClassDecoratorOptions"],"mappings":";;;;;;;;;;;AAyDiB,IAAA;AAAA,CAAV,CAAUA,uBAAV,KAAA;AAIE,EAAMA,uBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,wBAAwB,CAAA;AAAA,CAJrC,EAAA,sBAAA,KAAA,sBAAA,GAAA,EAAA,CAAA,CAAA","file":"class-decorator-options.interface.mjs","sourcesContent":["/**\n * Options for creating a class decorator\n * Controls how the decorator modifies the target class\n */\nexport interface IClassDecoratorOptions {\n  /**\n   * Whether to copy prototype properties\n   * @default true\n   */\n  copyPrototype?: boolean\n\n  /**\n   * Whether to copy static properties\n   * @default true\n   */\n  copyStatic?: boolean\n\n  /**\n   * Whether to copy metadata\n   * @default true\n   */\n  copyMetadata?: boolean\n\n  /**\n   * A function to run before the constructor is called\n   * Can be used to prepare the environment or validate arguments\n   */\n  beforeConstructor?: (target: any, args: any[]) => void\n\n  /**\n   * A function to run after the constructor is called\n   * Can be used to modify the created instance\n   */\n  afterConstructor?: (instance: any, target: any, args: any[]) => void\n\n  /**\n   * A function to transform the instance after creation\n   * Can return a completely different object\n   */\n  transformInstance?: (instance: any, target: any, args: any[]) => any\n\n  /**\n   * Whether to inherit parent class decorators\n   * @default true\n   */\n  inheritDecorators?: boolean\n\n  /**\n   * Whether to seal the resulting class\n   * @default false\n   */\n  seal?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IClassDecoratorOptions {\n  /**\n   * Symbol for injecting the class decorator options service\n   */\n  export const $ = Symbol.for('IClassDecoratorOptions')\n}\n"]}