{"version":3,"sources":["../../../src/interfaces/console/input.interface.ts"],"names":["IInput"],"mappings":";;;;;;;;;;;AAyDiB,IAAA;AAAA,CAAV,CAAUA,OAAV,KAAA;AAKE,EAAMA,OAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,QAAQ,CAAA;AAAA,CALjB,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,CAAA,CAAA","file":"input.interface.mjs","sourcesContent":["/**\n * Interface for console input\n *\n * Provides methods for accessing command line arguments and options.\n */\nexport interface IInput {\n  /**\n   * Gets the command name from the input\n   *\n   * @returns {string | undefined} The command name or undefined if not provided\n   */\n  getCommandName(): string | undefined\n\n  /**\n   * Gets an argument value by name\n   *\n   * @param {string} name - The name of the argument\n   * @returns {string | undefined} The argument value or undefined if not provided\n   */\n  getArgument(name: string): string | undefined\n\n  /**\n   * Gets all arguments\n   *\n   * @returns {Record<string, string>} Map of argument names to values\n   */\n  getArguments(): Record<string, string>\n\n  /**\n   * Gets an option value by name\n   *\n   * @param {string} name - The name of the option\n   * @returns {string | boolean | undefined} The option value or undefined if not provided\n   */\n  getOption(name: string): string | boolean | undefined\n\n  /**\n   * Gets all options\n   *\n   * @returns {Record<string, string | boolean>} Map of option names to values\n   */\n  getOptions(): Record<string, string | boolean>\n\n  /**\n   * Checks if an option is set\n   *\n   * @param {string} name - The name of the option\n   * @returns {boolean} True if the option is set, false otherwise\n   */\n  hasOption(name: string): boolean\n}\n\n/**\n * Namespace for IInput interface\n *\n * Contains token for dependency injection\n */\nexport namespace IInput {\n  /**\n   * Token for the IInput interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol('IInput')\n}\n"]}