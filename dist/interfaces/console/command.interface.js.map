{"version":3,"sources":["../../../src/interfaces/console/command.interface.ts"],"names":["ICommand"],"mappings":";;;;;;;;;;;;;AAmGiBA;AAAA,CAAV,CAAUA,SAAV,KAAA;AAKE,EAAMA,SAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,UAAU,CAAA;AAAA,CALnB,EAAAA,gBAAA,KAAAA,gBAAA,GAAA,EAAA,CAAA,CAAA","file":"command.interface.js","sourcesContent":["import type { IInput } from \"./input.interface\"\nimport type { IOutput } from \"./output.interface\"\n\n/**\n * Interface for console commands\n *\n * All commands must implement this interface to be registered\n * and executed by the console application.\n */\nexport interface ICommand {\n  /**\n   * Gets the name of the command\n   *\n   * @returns {string} The command name\n   */\n  getName(): string\n\n  /**\n   * Gets the description of the command\n   *\n   * @returns {string} The command description\n   */\n  getDescription(): string\n\n  /**\n   * Configures the command with options and arguments\n   */\n  configure(): void\n\n  /**\n   * Sets the input instance\n   *\n   * @param {IInput} input - The input instance\n   */\n  setInput(input: IInput): void\n\n  /**\n   * Gets the input instance\n   *\n   * @returns {IInput} The input instance\n   */\n  getInput(): IInput\n\n  /**\n   * Sets the output instance\n   *\n   * @param {IOutput} output - The output instance\n   */\n  setOutput(output: IOutput): void\n\n  /**\n   * Gets the output instance\n   *\n   * @returns {IOutput} The output instance\n   */\n  getOutput(): IOutput\n\n  /**\n   * Sets the command arguments\n   *\n   * @param {string[]} args - The command arguments\n   */\n  setArguments(args: string[]): void\n\n  /**\n   * Sets the command options\n   *\n   * @param {Record<string, any>} options - The command options\n   */\n  setOptions(options: Record<string, any>): void\n\n  /**\n   * Executes the command\n   *\n   * @returns {Promise<number | void>} The exit code or void\n   */\n  execute(): Promise<number | void>\n\n  /**\n   * Hook that runs before command execution\n   *\n   * @returns {Promise<boolean>} True if execution should continue, false to abort\n   */\n  beforeExecute?(): Promise<boolean>\n\n  /**\n   * Hook that runs after command execution\n   *\n   * @param {number | void} exitCode - The exit code from the command\n   * @returns {Promise<void>}\n   */\n  afterExecute?(exitCode: number | void): Promise<void>\n}\n\n/**\n * Namespace for ICommand interface\n *\n * Contains token for dependency injection\n */\nexport namespace ICommand {\n  /**\n   * Token for the ICommand interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol(\"ICommand\")\n}\n"]}