{"version":3,"sources":["../../../src/interfaces/console/command.interface.ts"],"names":["ICommand"],"mappings":";;;;;;;;;;;;;AAmJiBA;AAAA,CAAV,CAAUA,SAAV,KAAA;AAKE,EAAMA,SAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,UAAU,CAAA;AAAA,CALnB,EAAAA,gBAAA,KAAAA,gBAAA,GAAA,EAAA,CAAA,CAAA","file":"command.interface.js","sourcesContent":["import type { IInput } from './input.interface'\nimport type { IOutput } from './output.interface'\n\n/**\n * Interface for console command classes.\n *\n * Defines the structure and lifecycle of a command,\n * including argument/option handling and execution hooks.\n */\nexport interface ICommand {\n  /**\n   * Gets the name of the command.\n   *\n   * @returns The command name.\n   */\n  getName(): string\n\n  /**\n   * Gets the description of the command.\n   *\n   * @returns The command description.\n   */\n  getDescription(): string\n\n  /**\n   * Sets the input instance for the command.\n   *\n   * @param input - The input instance to set.\n   */\n  setInput(input: IInput): void\n\n  /**\n   * Gets the current input instance.\n   *\n   * @returns The input instance.\n   */\n  getInput(): IInput\n\n  /**\n   * Sets the output instance for the command.\n   *\n   * @param output - The output instance to set.\n   */\n  setOutput(output: IOutput): void\n\n  /**\n   * Gets the current output instance.\n   *\n   * @returns The output instance.\n   */\n  getOutput(): IOutput\n\n  /**\n   * Sets multiple arguments by index or name.\n   *\n   * @param args - Array of positional arguments.\n   */\n  setArguments(args: string[]): void\n\n  /**\n   * Sets a single named argument.\n   *\n   * @param key - Argument key.\n   * @param value - Argument value.\n   */\n  setArgument(key: string, value: any): void\n\n  /**\n   * Gets all arguments.\n   *\n   * @returns A key-value map of arguments.\n   */\n  getArguments(): Record<string, any>\n\n  /**\n   * Gets a single argument by name.\n   *\n   * @param key - Argument name.\n   * @returns The value or undefined.\n   */\n  getArgument(key: string): any\n\n  /**\n   * Sets multiple options by key.\n   *\n   * @param options - Key-value map of options.\n   */\n  setOptions(options: Record<string, any>): void\n\n  /**\n   * Sets a single option.\n   *\n   * @param key - Option key.\n   * @param value - Option value.\n   */\n  setOption(key: string, value: any): void\n\n  /**\n   * Gets all options.\n   *\n   * @returns A key-value map of options.\n   */\n  getOptions(): Record<string, any>\n\n  /**\n   * Gets a single option by key.\n   *\n   * @param key - Option name.\n   * @returns The value or undefined.\n   */\n  getOption(key: string): any\n\n  /**\n   * Allows a command to define its expected arguments and options.\n   * Called before execution.\n   */\n  configure(): void\n\n  /**\n   * Main execution logic of the command.\n   * Must return a status code (or void).\n   *\n   * @returns Promise resolving to exit code or void.\n   */\n  execute(): Promise<number | void>\n\n  /**\n   * Hook called before command execution.\n   * Return false to cancel execution.\n   *\n   * @returns Whether to continue execution.\n   */\n  beforeExecute(): Promise<boolean>\n\n  /**\n   * Hook called after command execution.\n   *\n   * @param exitCode - The result from execute().\n   */\n  afterExecute(exitCode: number | void): Promise<void>\n}\n\n/**\n * Namespace for ICommand interface\n *\n * Contains token for dependency injection\n */\nexport namespace ICommand {\n  /**\n   * Token for the ICommand interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol('ICommand')\n}\n"]}