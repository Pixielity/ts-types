{"version":3,"sources":["../../../src/interfaces/console/ask.interface.ts"],"names":["IAsk"],"mappings":";;;;;;;;;;;;;AAoFiBA;AAAA,CAAV,CAAUA,KAAV,KAAA;AAKE,EAAMA,KAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,MAAM,CAAA;AAAA,CALf,EAAAA,YAAA,KAAAA,YAAA,GAAA,EAAA,CAAA,CAAA","file":"ask.interface.js","sourcesContent":["import type { IQuestion } from './question.interface'\n\n/**\n * Interface for ask utility\n *\n * Provides methods for asking questions in the console.\n */\nexport interface IAsk {\n  /**\n   * Asks a single question\n   *\n   * @param {IQuestion} question - The question to ask\n   * @returns {Promise<any>} The answer\n   */\n  question(question: IQuestion): Promise<any>\n\n  /**\n   * Asks multiple questions\n   *\n   * @param {IQuestion[]} questions - The questions to ask\n   * @returns {Promise<Record<string, any>>} The answers\n   */\n  questions(questions: IQuestion[]): Promise<Record<string, any>>\n\n  /**\n   * Asks for input\n   *\n   * @param {string} message - The message to display\n   * @param {string} defaultValue - The default value\n   * @returns {Promise<string>} The input\n   */\n  input(message: string, defaultValue?: string): Promise<string>\n\n  /**\n   * Asks for confirmation\n   *\n   * @param {string} message - The message to display\n   * @param {boolean} defaultValue - The default value\n   * @returns {Promise<boolean>} The confirmation\n   */\n  confirm(message: string, defaultValue?: boolean): Promise<boolean>\n\n  /**\n   * Asks for a selection from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any} defaultValue - The default value\n   * @returns {Promise<any>} The selection\n   */\n  select(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any,\n  ): Promise<any>\n\n  /**\n   * Asks for multiple selections from a list\n   *\n   * @param {string} message - The message to display\n   * @param {string[] | { name: string; value: any }[]} choices - The choices\n   * @param {any[]} defaultValue - The default values\n   * @returns {Promise<any[]>} The selections\n   */\n  multiSelect(\n    message: string,\n    choices: string[] | { name: string; value: any }[],\n    defaultValue?: any[],\n  ): Promise<any[]>\n\n  /**\n   * Asks for a password\n   *\n   * @param {string} message - The message to display\n   * @returns {Promise<string>} The password\n   */\n  password(message: string): Promise<string>\n}\n\n/**\n * Namespace for IAsk interface\n *\n * Contains token for dependency injection\n */\nexport namespace IAsk {\n  /**\n   * Token for the IAsk interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol('IAsk')\n}\n"]}