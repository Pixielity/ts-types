{"version":3,"sources":["../../../../src/interfaces/console/command/collector.interface.ts"],"names":["ICommandCollector"],"mappings":";;;;;;;;;;;AAsCiB,IAAA;AAAA,CAAV,CAAUA,kBAAV,KAAA;AAKE,EAAMA,kBAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,mBAAmB,CAAA;AAAA,CAL5B,EAAA,iBAAA,KAAA,iBAAA,GAAA,EAAA,CAAA,CAAA","file":"collector.interface.mjs","sourcesContent":["import type { ICommand } from './command.interface'\n\n/**\n * Interface for command collector\n *\n * Discovers and collects commands from the file system.\n */\nexport interface ICommandCollector {\n  /**\n   * Discovers commands in the specified directory\n   *\n   * @param {string} directory - The directory to scan for commands\n   * @param {string} pattern - The glob pattern to match command files\n   * @returns {Promise<ICommand[]>} The discovered commands\n   */\n  discoverCommands(directory: string, pattern?: string): Promise<ICommand[]>\n\n  /**\n   * Gets all commands that have been registered with the container\n   *\n   * @returns {ICommand[]} The registered commands\n   */\n  getRegisteredCommands(): ICommand[]\n\n  /**\n   * Gets command metadata for a command class\n   *\n   * @param {Function} commandClass - The command class\n   * @returns {any} The command metadata\n   */\n  getCommandMetadata(commandClass: Function): any\n}\n\n/**\n * Namespace for ICommandCollector interface\n *\n * Contains token for dependency injection\n */\nexport namespace ICommandCollector {\n  /**\n   * Token for the ICommandCollector interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol('ICommandCollector')\n}\n"]}