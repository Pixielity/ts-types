{"version":3,"sources":["../../../../src/interfaces/console/command/registry.interface.ts"],"names":["ICommandRegistry"],"mappings":";;;;;;;;;;;;;AA0DiBA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAKE,EAAMA,iBAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,kBAAkB,CAAA;AAAA,CAL3B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA","file":"registry.interface.js","sourcesContent":["import type { ICommand } from './command.interface'\n\n/**\n * Interface for the command registry\n *\n * Stores and manages all registered commands.\n */\nexport interface ICommandRegistry {\n  /**\n   * Adds a command to the registry\n   *\n   * @param {ICommand} command - The command to add\n   * @throws {Error} If a command with the same name already exists\n   */\n  add(command: ICommand): void\n\n  /**\n   * Gets a command by name\n   *\n   * @param {string} name - The name of the command\n   * @returns {ICommand | undefined} The command or undefined if not found\n   */\n  get(name: string): ICommand | undefined\n\n  /**\n   * Gets all registered commands\n   *\n   * @returns {ICommand[]} Array of all registered commands\n   */\n  getAll(): ICommand[]\n\n  /**\n   * Checks if a command exists\n   *\n   * @param {string} name - The name of the command\n   * @returns {boolean} True if the command exists, false otherwise\n   */\n  has(name: string): boolean\n\n  /**\n   * Removes a command from the registry\n   *\n   * @param {string} name - The name of the command\n   * @returns {boolean} True if the command was removed, false otherwise\n   */\n  remove(name: string): boolean\n\n  /**\n   * Clears all commands from the registry\n   */\n  clear(): void\n}\n\n/**\n * Namespace for ICommandRegistry interface\n *\n * Contains token for dependency injection\n */\nexport namespace ICommandRegistry {\n  /**\n   * Token for the ICommandRegistry interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol('ICommandRegistry')\n}\n"]}