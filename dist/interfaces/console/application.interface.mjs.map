{"version":3,"sources":["../../../src/interfaces/console/application.interface.ts"],"names":["IApplication"],"mappings":";;;;;;;;;;;AA+CiB,IAAA;AAAA,CAAV,CAAUA,aAAV,KAAA;AAKE,EAAMA,aAAAA,CAAA,CAAI,GAAA,MAAA,CAAO,cAAc,CAAA;AAAA,CALvB,EAAA,YAAA,KAAA,YAAA,GAAA,EAAA,CAAA,CAAA","file":"application.interface.mjs","sourcesContent":["import type { ICommand } from \"./command.interface\"\n\n/**\n * Interface for the console application\n *\n * Manages the console commands and their execution.\n */\nexport interface IApplication {\n  /**\n   * Registers a command with the application\n   *\n   * @param {ICommand} command - The command to register\n   * @returns {IApplication} - The application instance for chaining\n   */\n  register(command: ICommand): IApplication\n\n  /**\n   * Registers multiple commands with the application\n   *\n   * @param {ICommand[]} commands - The commands to register\n   * @returns {IApplication} - The application instance for chaining\n   */\n  registerCommands(commands: ICommand[]): IApplication\n\n  /**\n   * Discovers and registers commands from a directory\n   *\n   * @param {string} directory - The directory to scan for commands\n   * @param {string} pattern - The glob pattern to match command files\n   * @returns {Promise<IApplication>} - The application instance for chaining\n   */\n  discoverCommands(directory: string, pattern?: string): Promise<IApplication>\n\n  /**\n   * Runs the application with the given arguments\n   *\n   * @param {string[]} argv - The command line arguments\n   * @returns {Promise<void>}\n   */\n  run(argv?: string[]): Promise<void>\n}\n\n/**\n * Namespace for IApplication interface\n *\n * Contains token for dependency injection\n */\nexport namespace IApplication {\n  /**\n   * Token for the IApplication interface\n   * Used for dependency injection\n   */\n  export const $ = Symbol(\"IApplication\")\n}\n"]}