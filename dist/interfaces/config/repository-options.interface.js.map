{"version":3,"sources":["../../../src/interfaces/config/repository-options.interface.ts"],"names":["IConfigRepositoryOptions"],"mappings":";;;;;;;;;;;;;AAoDiBA;AAAA,CAAV,CAAUA,yBAAV,KAAA;AAIE,EAAMA,yBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,0BAA0B,CAAA;AAAA,CAJvC,EAAAA,gCAAA,KAAAA,gCAAA,GAAA,EAAA,CAAA,CAAA","file":"repository-options.interface.js","sourcesContent":["import type { IConfigSchema } from './schema.interface'\nimport type { IConfigCacheOptions } from './cache-options.interface'\n\n/**\n * Configuration repository options\n * Controls the behavior of the configuration repository\n */\nexport interface IConfigRepositoryOptions {\n  /**\n   * Initial configuration items\n   */\n  items?: Record<string, any>\n\n  /**\n   * Environment variable prefix\n   * @default \"APP_\"\n   */\n  envPrefix?: string\n\n  /**\n   * Cache options\n   * @default { enabled: true }\n   */\n  cache?: boolean | IConfigCacheOptions\n\n  /**\n   * Configuration schemas for validation\n   */\n  schemas?: Record<string, IConfigSchema>\n\n  /**\n   * Whether to validate configuration values\n   * @default false\n   */\n  validate?: boolean\n\n  /**\n   * Configuration sources to load from\n   * Can be file paths, URLs, or other source identifiers\n   */\n  sources?: string[]\n\n  /**\n   * Whether to watch for changes in configuration sources\n   * @default false\n   */\n  watch?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigRepositoryOptions {\n  /**\n   * Symbol for injecting the config repository options service\n   */\n  export const $ = Symbol.for('IConfigRepositoryOptions')\n}\n"]}