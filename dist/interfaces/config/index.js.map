{"version":3,"sources":["../../../src/interfaces/config/repository-options.interface.ts","../../../src/interfaces/config/cache.interface.ts","../../../src/interfaces/config/cache-item.interface.ts","../../../src/interfaces/config/cache-options.interface.ts","../../../src/interfaces/config/loader.interface.ts","../../../src/interfaces/config/decorator-options.interface.ts","../../../src/interfaces/config/config.interface.ts"],"names":["IConfigRepositoryOptions","IConfigCache","ICacheItem","IConfigCacheOptions","IConfigLoader","IConfigOptions","IConfig"],"mappings":";;;;;;;;;;;;;AAoDiBA;AAAA,CAAV,CAAUA,yBAAV,KAAA;AAIE,EAAMA,yBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,0BAA0B,CAAA;AAAA,CAJvC,EAAAA,gCAAA,KAAAA,gCAAA,GAAA,EAAA,CAAA,CAAA;;;ACgBAC;AAAA,CAAV,CAAUA,aAAV,KAAA;AAIE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAJ3B,EAAAA,oBAAA,KAAAA,oBAAA,GAAA,EAAA,CAAA,CAAA;;;ACtCAC;AAAA,CAAV,CAAUA,WAAV,KAAA;AAIE,EAAMA,WAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,YAAY,CAAA;AAAA,CAJzB,EAAAA,kBAAA,KAAAA,kBAAA,GAAA,EAAA,CAAA,CAAA;;;ACSAC;AAAA,CAAV,CAAUA,oBAAV,KAAA;AAIE,EAAMA,oBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,qBAAqB,CAAA;AAAA,CAJlC,EAAAA,2BAAA,KAAAA,2BAAA,GAAA,EAAA,CAAA,CAAA;;;ACdAC;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA;;;ACkBAC;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA;;;ACjCAC;AAAA,CAAV,CAAUA,QAAV,KAAA;AAIE,EAAMA,QAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA,CAJtB,EAAAA,eAAA,KAAAA,eAAA,GAAA,EAAA,CAAA,CAAA","file":"index.js","sourcesContent":["import type { IConfigSchema } from './schema.interface'\nimport type { IConfigCacheOptions } from './cache-options.interface'\n\n/**\n * Configuration repository options\n * Controls the behavior of the configuration repository\n */\nexport interface IConfigRepositoryOptions {\n  /**\n   * Initial configuration items\n   */\n  items?: Record<string, any>\n\n  /**\n   * Environment variable prefix\n   * @default \"APP_\"\n   */\n  envPrefix?: string\n\n  /**\n   * Cache options\n   * @default { enabled: true }\n   */\n  cache?: boolean | IConfigCacheOptions\n\n  /**\n   * Configuration schemas for validation\n   */\n  schemas?: Record<string, IConfigSchema>\n\n  /**\n   * Whether to validate configuration values\n   * @default false\n   */\n  validate?: boolean\n\n  /**\n   * Configuration sources to load from\n   * Can be file paths, URLs, or other source identifiers\n   */\n  sources?: string[]\n\n  /**\n   * Whether to watch for changes in configuration sources\n   * @default false\n   */\n  watch?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigRepositoryOptions {\n  /**\n   * Symbol for injecting the config repository options service\n   */\n  export const $ = Symbol.for('IConfigRepositoryOptions')\n}\n","/**\n * Interface for the configuration cache\n */\nexport interface IConfigCache {\n  /**\n   * Enable or disable the cache\n   *\n   * @param enabled - Whether to enable the cache\n   */\n  setEnabled(enabled: boolean): void\n\n  /**\n   * Set the maximum cache size\n   *\n   * @param maxSize - The maximum number of items to store in the cache\n   */\n  setMaxSize(maxSize: number): void\n\n  /**\n   * Set the time to live for cache items\n   *\n   * @param ttl - The time to live in milliseconds\n   */\n  setTtl(ttl: number): void\n\n  /**\n   * Get a value from the cache\n   *\n   * @param key - The cache key\n   */\n  get<T>(key: string): T | undefined\n\n  /**\n   * Set a value in the cache\n   *\n   * @param key - The cache key\n   * @param value - The value to cache\n   */\n  set<T>(key: string, value: T): void\n\n  /**\n   * Delete a value from the cache\n   *\n   * @param key - The cache key\n   */\n  delete(key: string): void\n\n  /**\n   * Clear the cache\n   */\n  clear(): void\n\n  /**\n   * Get the number of items in the cache\n   */\n  size(): number\n\n  /**\n   * Check if a key exists in the cache\n   *\n   * @param key - The cache key\n   */\n  has(key: string): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigCache {\n  /**\n   * Symbol for injecting the config cache service\n   */\n  export const $ = Symbol.for('IConfigCache')\n}\n","/**\n * Cache item interface\n * Represents a single cached configuration value\n */\nexport interface ICacheItem<T> {\n  /**\n   * The cached value\n   */\n  value: T\n\n  /**\n   * The expiration timestamp (milliseconds since epoch)\n   * If undefined, the item never expires\n   */\n  expires?: number\n\n  /**\n   * When the item was created (milliseconds since epoch)\n   */\n  created: number\n\n  /**\n   * When the item was last accessed (milliseconds since epoch)\n   */\n  lastAccessed?: number\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace ICacheItem {\n  /**\n   * Symbol for injecting the cache item service\n   */\n  export const $ = Symbol.for('ICacheItem')\n}\n","/**\n * Configuration cache options\n * Controls how configuration values are cached\n */\nexport interface IConfigCacheOptions {\n  /**\n   * Whether the cache is enabled\n   * @default true\n   */\n  enabled?: boolean\n\n  /**\n   * The maximum number of items to store in the cache\n   * @default 1000\n   */\n  maxSize?: number\n\n  /**\n   * The time to live for cache items in milliseconds\n   * @default 0 (no expiration)\n   */\n  ttl?: number\n\n  /**\n   * Whether to use a persistent cache\n   * @default false\n   */\n  persistent?: boolean\n\n  /**\n   * The storage key for persistent cache\n   * @default \"config_cache\"\n   */\n  storageKey?: string\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigCacheOptions {\n  /**\n   * Symbol for injecting the config cache options service\n   */\n  export const $ = Symbol.for('IConfigCacheOptions')\n}\n","/**\n * Configuration loader interface\n * Responsible for loading configuration from various sources\n */\nexport interface IConfigLoader {\n  /**\n   * Load configuration from a source\n   *\n   * @param source - The source to load from (file path, URL, etc.)\n   * @returns A promise resolving to the loaded configuration\n   */\n  load(source: string): Promise<Record<string, any>>\n\n  /**\n   * Check if the loader can load from a source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  canLoad(source: string): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigLoader {\n  /**\n   * Symbol for injecting the config loader service\n   */\n  export const $ = Symbol.for('IConfigLoader')\n}\n","/**\n * Options for the Config decorator\n * Controls how configuration values are injected into class properties\n */\nexport interface IConfigOptions {\n  /**\n   * The configuration key to retrieve\n   */\n  key: string\n\n  /**\n   * The default value to use if the configuration key doesn't exist\n   */\n  defaultValue?: any\n\n  /**\n   * The enviroment variables\n   */\n  env?: string\n\n  /**\n   * Whether to refresh the value when accessed\n   * When true, the value is retrieved from the config repository each time\n   * @default false\n   */\n  refresh?: boolean\n\n  /**\n   * Transform function to apply to the value\n   * Allows custom formatting or type conversion\n   */\n  transform?: (value: any) => any\n\n  /**\n   * Whether to validate the value against its schema\n   * @default true\n   */\n  validate?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigOptions {\n  /**\n   * Symbol for injecting the config options service\n   */\n  export const $ = Symbol.for('IConfigOptions')\n}\n","import { IConfigRepository } from './repository.interface'\n\n/**\n * Interface for the configuration repository\n */\nexport interface IConfig extends IConfigRepository {}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfig {\n  /**\n   * Symbol for injecting the cache manager service\n   */\n  export const $ = Symbol.for('IConfig')\n}\n"]}