{"version":3,"sources":["../../../src/interfaces/config/decorator-options.interface.ts"],"names":["IConfigOptions"],"mappings":";;;;;;;;;;;;;AAsCiBA;AAAA,CAAV,CAAUA,eAAV,KAAA;AAIE,EAAMA,eAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,gBAAgB,CAAA;AAAA,CAJ7B,EAAAA,sBAAA,KAAAA,sBAAA,GAAA,EAAA,CAAA,CAAA","file":"decorator-options.interface.js","sourcesContent":["/**\n * Options for the Config decorator\n * Controls how configuration values are injected into class properties\n */\nexport interface IConfigOptions {\n  /**\n   * The configuration key to retrieve\n   */\n  key: string\n\n  /**\n   * The default value to use if the configuration key doesn't exist\n   */\n  defaultValue?: any\n\n  /**\n   * Whether to refresh the value when accessed\n   * When true, the value is retrieved from the config repository each time\n   * @default false\n   */\n  refresh?: boolean\n\n  /**\n   * Transform function to apply to the value\n   * Allows custom formatting or type conversion\n   */\n  transform?: (value: any) => any\n\n  /**\n   * Whether to validate the value against its schema\n   * @default true\n   */\n  validate?: boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigOptions {\n  /**\n   * Symbol for injecting the config options service\n   */\n  export const $ = Symbol.for(\"IConfigOptions\")\n}\n"]}