{"version":3,"sources":["../../../src/interfaces/config/loader.interface.ts"],"names":["IConfigLoader"],"mappings":";;;;;;;;;;;;;AAiCiBA;AAAA,CAAV,CAAUA,cAAV,KAAA;AAIE,EAAMA,cAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,eAAe,CAAA;AAAA,CAJ5B,EAAAA,qBAAA,KAAAA,qBAAA,GAAA,EAAA,CAAA,CAAA","file":"loader.interface.js","sourcesContent":["/**\n * Configuration loader interface\n * Responsible for loading configuration from various sources\n */\nexport interface IConfigLoader {\n  /**\n   * Load configuration from a source\n   *\n   * @param source - The source to load from (file path, URL, etc.)\n   * @returns A promise resolving to the loaded configuration\n   */\n  load(source: string): Promise<Record<string, any>>\n\n  /**\n   * Check if the loader can load from a source\n   *\n   * @param source - The source to check\n   * @returns Whether the loader can load from the source\n   */\n  canLoad(source: string): boolean\n\n  /**\n   * Get the priority of this loader\n   * Higher priority loaders are tried first\n   *\n   * @returns The loader priority\n   */\n  getPriority(): number\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigLoader {\n  /**\n   * Symbol for injecting the config loader service\n   */\n  export const $ = Symbol.for(\"IConfigLoader\")\n}\n"]}