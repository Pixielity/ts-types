{"version":3,"sources":["../../../src/interfaces/config/cache.interface.ts"],"names":["IConfigCache"],"mappings":";;;;;;;;;;;AAoEiB,IAAA;AAAA,CAAV,CAAUA,aAAV,KAAA;AAIE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAJ3B,EAAA,YAAA,KAAA,YAAA,GAAA,EAAA,CAAA,CAAA","file":"cache.interface.mjs","sourcesContent":["/**\n * Interface for the configuration cache\n */\nexport interface IConfigCache {\n  /**\n   * Enable or disable the cache\n   *\n   * @param enabled - Whether to enable the cache\n   */\n  setEnabled(enabled: boolean): void\n\n  /**\n   * Set the maximum cache size\n   *\n   * @param maxSize - The maximum number of items to store in the cache\n   */\n  setMaxSize(maxSize: number): void\n\n  /**\n   * Set the time to live for cache items\n   *\n   * @param ttl - The time to live in milliseconds\n   */\n  setTtl(ttl: number): void\n\n  /**\n   * Get a value from the cache\n   *\n   * @param key - The cache key\n   */\n  get<T>(key: string): T | undefined\n\n  /**\n   * Set a value in the cache\n   *\n   * @param key - The cache key\n   * @param value - The value to cache\n   */\n  set<T>(key: string, value: T): void\n\n  /**\n   * Delete a value from the cache\n   *\n   * @param key - The cache key\n   */\n  delete(key: string): void\n\n  /**\n   * Clear the cache\n   */\n  clear(): void\n\n  /**\n   * Get the number of items in the cache\n   */\n  size(): number\n\n  /**\n   * Check if a key exists in the cache\n   *\n   * @param key - The cache key\n   */\n  has(key: string): boolean\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IConfigCache {\n  /**\n   * Symbol for injecting the config cache service\n   */\n  export const $ = Symbol.for('IConfigCache')\n}\n"]}