{"version":3,"sources":["../../../src/interfaces/application/service-provider.inteface.ts"],"names":["IServiceProvider"],"mappings":";;;;;;;;;;;AA4CiB,IAAA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAA,gBAAA,KAAA,gBAAA,GAAA,EAAA,CAAA,CAAA","file":"service-provider.inteface.mjs","sourcesContent":["/**\n * Interface for service providers.\n * Service providers are responsible for binding services into the container\n * and bootstrapping any dependencies.\n *\n * @example\n * \\`\\`\\`typescript\n * class CacheServiceProvider implements IServiceProvider {\n *   protected app: Container;\n *\n *   constructor(app: Container) {\n *     this.app = app;\n *   }\n *\n *   register(): void {\n *     this.app.singleton('cache', () => {\n *       return new CacheManager(this.app);\n *     });\n *   }\n *\n *   boot(): void {\n *     // Bootstrap the cache service\n *   }\n * }\n * \\`\\`\\`\n */\nexport interface IServiceProvider {\n  /**\n   * Register any application services.\n   * This method is called when the service provider is registered with the container.\n   */\n  register(): void\n\n  /**\n   * Bootstrap any application services.\n   * This method is called after all service providers have been registered.\n   * This method is optional and may not be implemented by all service providers.\n   */\n  boot?(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IServiceProvider {\n  /**\n   * Symbol for injecting the service provider\n   */\n  export const $ = Symbol.for(\"IServiceProvider\")\n}\n"]}