{"version":3,"sources":["../../../src/interfaces/application/service-provider.inteface.ts"],"names":["IServiceProvider"],"mappings":";;;;;;;;;;;;;AAyDiBA;AAAA,CAAV,CAAUA,iBAAV,KAAA;AAIE,EAAMA,iBAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,kBAAkB,CAAA;AAAA,CAJ/B,EAAAA,wBAAA,KAAAA,wBAAA,GAAA,EAAA,CAAA,CAAA","file":"service-provider.inteface.js","sourcesContent":["import { IContainer } from '../container'\n\n/**\n * Interface for service providers.\n * Service providers are responsible for binding services into the container\n * and bootstrapping any dependencies.\n *\n * @example\n * \\`\\`\\`typescript\n * class CacheServiceProvider implements IServiceProvider {\n *   protected app: Container;\n *\n *   constructor(app: Container) {\n *     this.app = app;\n *   }\n *\n *   register(): void {\n *     this.app.singleton('cache', () => {\n *       return new CacheManager(this.app);\n *     });\n *   }\n *\n *   boot(): void {\n *     // Bootstrap the cache service\n *   }\n * }\n * \\`\\`\\`\n */ export interface IServiceProvider {\n  /**\n   * The application container instance.\n   */\n  readonly app: IContainer\n\n  /**\n   * Register any application services.\n   */\n  register(): void\n\n  /**\n   * Bootstrap any application services (optional).\n   */\n  boot?(): void\n\n  /**\n   * Clean up services before shutdown (optional).\n   */\n  terminate?(): void\n\n  /**\n   * Publish files or configurations (optional).\n   */\n  publish?(): void\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IServiceProvider {\n  /**\n   * Symbol for injecting the service provider\n   */\n  export const $ = Symbol.for('IServiceProvider')\n}\n"]}