{"version":3,"sources":["../../../src/interfaces/application/application.interface.ts"],"names":["IApplication"],"mappings":";;;;;;;;;;;;;AAqEiBA;AAAA,CAAV,CAAUA,aAAV,KAAA;AAIE,EAAMA,aAAA,CAAA,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,cAAc,CAAA;AAAA,CAJ3B,EAAAA,oBAAA,KAAAA,oBAAA,GAAA,EAAA,CAAA,CAAA","file":"application.interface.js","sourcesContent":["import type { interfaces } from 'inversify'\n\nimport { ServiceIdentifier } from '../../types'\nimport type { IContainer } from '../container'\n\n/**\n * Interface for the application\n */\nexport interface IApplication {\n  /**\n   * Get the service container.\n   */\n  getContainer(): IContainer\n\n  /**\n   * Register the core service providers.\n   */\n  registerCoreProviders(): IApplication\n\n  /**\n   * Register a service provider.\n   *\n   * @param provider - The service provider to register\n   */\n  register(provider: any): IApplication\n\n  /**\n   * Boot the application.\n   */\n  boot(): IApplication\n\n  /**\n   * Determine if the application has been bootstrapped.\n   */\n  isBooted(): boolean\n\n  /**\n   * Get a service from the container.\n   *\n   * @param abstract - The abstract type to resolve\n   */\n  make<T>(abstract: ServiceIdentifier<T>): T\n\n  /**\n   * Register a binding with the container.\n   *\n   * @param abstract - The abstract type to bind\n   * @param concrete - The concrete implementation\n   * @param shared - Whether the binding should be shared\n   */\n  bind<T>(\n    abstract: string | ServiceIdentifier<T>,\n    concrete?: any,\n    shared?: boolean,\n  ): IContainer | interfaces.BindingToSyntax<T>\n\n  /**\n   * Register an existing instance as shared in the container.\n   *\n   * @param abstract - The abstract type to bind\n   * @param instance - The instance to register\n   * @returns The container instance\n   */\n  instance<T>(abstract: ServiceIdentifier<T>, instance: T): IContainer\n}\n\n/**\n * Namespace containing symbols for dependency injection\n */\nexport namespace IApplication {\n  /**\n   * Symbol for injecting the application service\n   */\n  export const $ = Symbol.for('IApplication')\n}\n"]}